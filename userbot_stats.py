import os
import json
import time
import asyncio
import re
import uuid
import datetime
from pyrogram import Client
from tqdm import tqdm
from typing import List, Dict, Optional

api_id = 26333656
api_hash = "2c550faf732f3920b062006d9b7dfd55"

# --- –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã ---
ACCOUNTS = [
    {"phone": "+79001234567", "session": "account1"},
    {"phone": "+79001234568", "session": "account2"},
    {"phone": "+79001234569", "session": "account3"},
    # –î–æ–±–∞–≤—å—Ç–µ –¥–æ 15 –∞–∫–∫–∞—É–Ω—Ç–æ–≤
]

# --- –§–æ—Ä–º–∞—Ç—ã –ø–æ—Å—Ç–æ–≤ ---
POST_FORMATS = {
    "list": {
        "name": "–°–ø–∏—Å–æ–∫",
        "patterns": [r'\d+\.', r'[-‚Ä¢]', r'–≤–æ-–ø–µ—Ä–≤—ã—Ö', r'–¥–∞–ª–µ–µ'],
        "conditions": ["3+ —Å—Ç—Ä–æ–∫ —Å –ø–æ—Ö–æ–∂–∏–º —à–∞–±–ª–æ–Ω–æ–º"]
    },
    "story": {
        "name": "–ò—Å—Ç–æ—Ä–∏—è", 
        "patterns": [r'–æ–¥–Ω–∞–∂–¥—ã', r'—è –ø–æ–º–Ω—é', r'–≤—á–µ—Ä–∞', r'–∫–æ–≥–¥–∞-—Ç–æ'],
        "conditions": ["–Ω–∞—Ä—Ä–∞—Ç–∏–≤", "–ª–∏—á–Ω—ã–π —Ä–∞—Å—Å–∫–∞–∑", "–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω–∏—è"]
    },
    "analytics": {
        "name": "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
        "patterns": [r'–ø–æ –¥–∞–Ω–Ω—ã–º', r'—Ä–æ—Å—Ç', r'%', r'–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ'],
        "conditions": ["—Ñ–∞–∫—Ç—ã", "—Ü–∏—Ñ—Ä—ã", "–∏—Å—Ç–æ—á–Ω–∏–∫–∏", "–≥—Ä–∞—Ñ–∏–∫–∏"]
    },
    "opinion": {
        "name": "–ú–Ω–µ–Ω–∏–µ/–ø–æ–∑–∏—Ü–∏—è",
        "patterns": [r'–º–Ω–µ –∫–∞–∂–µ—Ç—Å—è', r'–ø–æ –º–æ–µ–º—É –º–Ω–µ–Ω–∏—é', r'—è –¥—É–º–∞—é'],
        "conditions": ["—Å—É–±—ä–µ–∫—Ç–∏–≤–Ω—ã–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", "–æ—Ü–µ–Ω–∫–∞ —Å–æ–±—ã—Ç–∏–π"]
    },
    "howto": {
        "name": "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
        "patterns": [r'—Å–¥–µ–ª–∞–π', r'–Ω–∞—Å—Ç—Ä–æ–π', r'—Å–∫–∞—á–∞–π', r'—à–∞–≥ \d+'],
        "conditions": ["–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", "–ø–æ–≤–µ–ª–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∫–ª–æ–Ω–µ–Ω–∏–µ"]
    },
    "news": {
        "name": "–ù–æ–≤–æ—Å—Ç—å",
        "patterns": [r'–ø—Ä–æ–∏–∑–æ—à–ª–æ', r'–≤ \d{4}', r'—Å–µ–≥–æ–¥–Ω—è', r'–ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º'],
        "conditions": ["–¥–∞—Ç–∞/–≤—Ä–µ–º—è", "—Å–æ–±—ã—Ç–∏–µ", "–∫—Ä–∞—Ç–∫–æ—Å—Ç—å"]
    },
    "motivation": {
        "name": "–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ",
        "patterns": [r'—Ç—ã –º–æ–∂–µ—à—å', r'–ø–æ–≤–µ—Ä—å –≤ —Å–µ–±—è', r'–Ω–µ —Å–¥–∞–≤–∞–π—Å—è'],
        "conditions": ["–ø–∞—Ñ–æ—Å", "–º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞", "–ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é"]
    },
    "fun": {
        "name": "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ/—é–º–æ—Ä",
        "patterns": [r'–ª–æ–ª', r'–∞—Ö–∞—Ö–∞', r'–º–µ–º', r'–ø—Ä–∏–∫–æ–ª'],
        "conditions": ["—à—É—Ç–∫–∏", "–Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å", "—ç–º–æ–¥–∑–∏"]
    },
    "quote": {
        "name": "–¶–∏—Ç–∞—Ç–∞",
        "patterns": [r'‚Äî', r'—Å–∫–∞–∑–∞–ª', r'—Ü–∏—Ç–∞—Ç–∞'],
        "conditions": ["–∫–∞–≤—ã—á–∫–∏", "–∏–º—è –∞–≤—Ç–æ—Ä–∞", "–º–µ–Ω—å—à–µ 3 —Å—Ç—Ä–æ–∫"]
    }
}

# --- CTA –ø–∞—Ç—Ç–µ—Ä–Ω—ã ---
CTA_PATTERNS = [
    r'–ø–æ–¥–ø–∏—à–∏—Å—å', r'—Å–ª–µ–¥–∏ –∑–∞', r'–ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è', r'–∂–º–∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è',
    r'–ø–∏—à–∏ –≤ –∫–æ–º–º–µ–Ω—Ç—ã', r'–æ—Ü–µ–Ω–∏', r'—Å–º–æ—Ç—Ä–∏ –¥–∞–ª—å—à–µ', r'—Å–æ—Ö—Ä–∞–Ω–∏',
    r'–∂–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É', r'–∞ —Ç—ã –∫–∞–∫ –¥—É–º–∞–µ—à—å\?', r'–ø–∏—à–∏ \+ –µ—Å–ª–∏ –ø–æ–ª–µ–∑–Ω–æ',
    r'—á—Ç–æ —Å–∫–∞–∂–µ—à—å\?', r'—á–∏—Ç–∞–π', r'—É–∑–Ω–∞–π', r'–Ω–∞—á–Ω–∏', r'–ø–µ—Ä–µ–π–¥–∏',
    r'–∂–º–∏', r'–≤—Å—Ç—É–ø–∞–π', r'–ø–µ—Ä–µ—Ö–æ–¥–∏ —Å—é–¥–∞', r'–∫–∞–Ω–∞–ª', r'–±–æ—Ç'
]

# --- –î–µ—Ç–µ–∫—Ü–∏—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ ---
AD_DETECTION = {
    "external_links": [r'https://', r't\.me/', r'@\w+', r'tg://', r'bit\.ly'],
    "brand_mentions": [r'@\w+', r't\.me/\w+', r'–ø–µ—Ä–µ—Ö–æ–¥–∏ —Å—é–¥–∞', r'–∫–∞–Ω–∞–ª', r'–±–æ—Ç'],
    "cta_phrases": [r'–ø–æ–¥–ø–∏—à–∏—Å—å', r'—á–∏—Ç–∞–π', r'—É–∑–Ω–∞–π', r'–Ω–∞—á–Ω–∏', r'–ø–µ—Ä–µ–π–¥–∏', r'–∂–º–∏', r'–≤—Å—Ç—É–ø–∞–π'],
    "brand_words": [],  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –±—Ä–µ–Ω–¥–∞–º–∏
    "emoji_threshold": 0.1,  # 10% —ç–º–æ–¥–∑–∏
    "caps_threshold": 0.3    # 30% –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤
}

app = Client("userbot_session", api_id=api_id, api_hash=api_hash)

THEMES = {
    "–•—É–¥–æ–∂–µ—Å—Ç–≤–æ": ["–∫–∞—Ä—Ç–∏–Ω–∞", "–∂–∏–≤–æ–ø–∏—Å—å", "—Ö—É–¥–æ–∂–Ω–∏–∫", "—Ä–∏—Å—É–Ω–æ–∫", "–∞—Ä—Ç", "–≥–∞–ª–µ—Ä–µ—è"],
    "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞": ["–∫–Ω–∏–≥–∞", "–ø–æ—ç–∑–∏—è", "—Ä–æ–º–∞–Ω", "–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "—Å—Ç–∏—Ö", "–ø–∏—Å–∞—Ç–µ–ª—å"],
    "–ö–∏–Ω–æ": ["—Ñ–∏–ª—å–º", "–∫–∏–Ω–æ", "—Ä–µ–∂–∏—Å—Å–µ—Ä", "–∞–∫—Ç–µ—Ä", "—Å–µ—Ä–∏–∞–ª", "–ø—Ä–µ–º—å–µ—Ä–∞"],
    "–ú—É–∑—ã–∫–∞": ["–º—É–∑—ã–∫–∞", "–ø–µ—Å–Ω—è", "–∞–ª—å–±–æ–º", "–∫–æ–Ω—Ü–µ—Ä—Ç", "–≥—Ä—É–ø–ø–∞", "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"],
}

os.makedirs("images", exist_ok=True)
os.makedirs("results", exist_ok=True)

TASKS_FILE = "tasks.json"
RESULTS_DIR = "results"

# --- SQLAlchemy async setup ---
import sys
sys.path.append(os.path.abspath(os.path.dirname(__file__)))
from bot.db import (
    SessionLocal, Channel, Post, ChannelSnapshot, PostSnapshot, Base, Account, AccountStatus
)

def detect_post_format(text: str) -> str:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –ø–æ—Å—Ç–∞"""
    if not text:
        return "other"
    
    text_lower = text.lower()
    lines = text.split('\n')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–æ—Ä–º–∞—Ç
    for format_key, format_data in POST_FORMATS.items():
        pattern_matches = 0
        condition_matches = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        for pattern in format_data["patterns"]:
            if re.search(pattern, text_lower):
                pattern_matches += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
        for condition in format_data["conditions"]:
            if condition in text_lower:
                condition_matches += 1
        
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        if pattern_matches >= 1 and condition_matches >= 1:
            return format_key
    
    return "other"

def extract_cta(text: str) -> Optional[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç CTA –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞"""
    if not text:
        return None
    
    lines = text.split('\n')
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1-3 —Å—Ç—Ä–æ–∫–∏
    for i in range(min(3, len(lines))):
        line = lines[-(i+1)].strip()
        for pattern in CTA_PATTERNS:
            if re.search(pattern, line, re.IGNORECASE):
                return line
    
    return None

def detect_ad_post(text: str, title: str = None) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ—Å—Ç —Ä–µ–∫–ª–∞–º–Ω—ã–º"""
    if not text:
        return False
    
    text_lower = text.lower()
    score = 0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏
    for pattern in AD_DETECTION["external_links"]:
        if re.search(pattern, text):
            score += 2
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤/–±–æ—Ç–æ–≤
    for pattern in AD_DETECTION["brand_mentions"]:
        if re.search(pattern, text):
            score += 2
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º CTA —Ñ—Ä–∞–∑—ã
    for pattern in AD_DETECTION["cta_phrases"]:
        if re.search(pattern, text):
            score += 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–æ–¥–∑–∏
    emoji_count = len(re.findall(r'[^\w\s]', text))
    if emoji_count / len(text) > AD_DETECTION["emoji_threshold"]:
        score += 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤
    caps_count = len(re.findall(r'[–ê-–Ø]', text))
    if caps_count / len(text) > AD_DETECTION["caps_threshold"]:
        score += 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É (1 –∞–±–∑–∞—Ü + –ø—Ä–∏–∑—ã–≤)
    paragraphs = text.split('\n\n')
    if len(paragraphs) == 2 and extract_cta(paragraphs[-1]):
        score += 2
    
    return score >= 3  # –ï—Å–ª–∏ 3+ –ø—Ä–∏–∑–Ω–∞–∫–∞ - —ç—Ç–æ —Ä–µ–∫–ª–∞–º–∞

def extract_title_and_body(text: str) -> tuple:
    """–†–∞–∑–¥–µ–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
    if not text:
        return None, text
    
    lines = text.split('\n')
    first_line = lines[0].strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
    if (len(first_line) < 100 and 
        not re.search(r'[.!?]{2,}', first_line) and
        (first_line.startswith('üî¥') or first_line.startswith('üîµ') or 
         first_line.startswith('‚ö°') or first_line[0].isupper() or
         '!' in first_line)):
        
        title = first_line
        body = '\n'.join(lines[1:]).strip()
        return title, body
    
    return None, text

async def save_channel_and_snapshot(chat):
    async with SessionLocal() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞–Ω–∞–ª
        channel_id = str(chat.id)
        channel = await session.get(Channel, channel_id)
        if not channel:
            channel = Channel(
                channel_id=channel_id,
                username=chat.username or f"{chat.id}",
                title=chat.title or chat.first_name or chat.username or str(chat.id),
                description=getattr(chat, 'description', None),
                is_bot_admin=False
            )
            session.add(channel)
            await session.commit()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º snapshot (–µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–∞ –æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞—Ö)
        try:
            snapshot = ChannelSnapshot(
                channel_snapshot_id=str(uuid.uuid4()),
                channel_id=channel_id,
                snapshot_date=datetime.datetime.utcnow(),
                subscribers_count=getattr(chat, 'members_count', None),
                reach_rate=None, avg_reactions=None, avg_reposts=None, avg_post_comments=None,
                new_followers=None, lost_followers=None, silent_users_percent=None, active_users_percent=None,
                posts_count=None, total_views=None, engagement_rate=None, source_info=None,
                notification_percent=None, avg_positive_reactions=None, avg_negative_reactions=None
            )
            session.add(snapshot)
            await session.commit()
        except Exception as e:
            print(f"[userbot] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å snapshot –∫–∞–Ω–∞–ª–∞: {e}")

async def save_post_and_snapshot(chat_id, msg):
    async with SessionLocal() as session:
        post_id = f"{chat_id}_{msg.id}"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        post_text = msg.text or msg.caption or ""
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        title, body = extract_title_and_body(post_text)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–æ—Å—Ç–∞
        format_type = detect_post_format(post_text)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º CTA
        cta = extract_cta(post_text)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∫–ª–∞–º–Ω—ã–º
        is_ad = detect_ad_post(post_text, title)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç
        post = await session.get(Post, post_id)
        if not post:
            post = Post(
                post_id=post_id,
                channel_id=str(chat_id),
                posted_at=msg.date,
                title=title,
                body=body,
                is_ad=is_ad,
                media_type='photo' if msg.photo else 'video' if msg.video else 'document' if msg.document else None,
                has_poll=bool(getattr(msg, 'poll', None)),
                format=format_type,
                cta=cta,
                topic=None,  # –ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º—ã
                tags=None
            )
            session.add(post)
            await session.commit()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º snapshot
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º ER (engagement rate)
            views = getattr(msg, 'views', 0)
            reactions = msg.reactions.reactions if msg.reactions else []
            total_reactions = sum(r.count for r in reactions)
            er = (total_reactions / views * 100) if views > 0 else 0
            
            snapshot = PostSnapshot(
                id=str(uuid.uuid4()),
                post_id=post_id,
                views_count=views,
                views_info=None,
                reactions=json.dumps({r.emoji: r.count for r in reactions}),
                comments=None,
                forwards=getattr(msg, 'forwards', None),
                forwards_private=None,
                er=er,
                snapshot_date=datetime.datetime.utcnow(),
                is_final=False
            )
            session.add(snapshot)
            await session.commit()
        except Exception as e:
            print(f"[userbot] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å snapshot –ø–æ—Å—Ç–∞: {e}")

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ ---
async def check_account_status(account_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞"""
    async with SessionLocal() as session:
        account = await session.get(Account, account_id)
        if not account:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
        if account.status == AccountStatus.Banned:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –æ—à–∏–±–æ–∫
        if account.status == AccountStatus.Error:
            return False
        
        return True

async def update_account_status(account_id: str, status: AccountStatus):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞"""
    async with SessionLocal() as session:
        account = await session.get(Account, account_id)
        if account:
            account.status = status
            account.last_used_at = datetime.datetime.utcnow()
            await session.commit()

# --- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ ---
async def monitor_accounts():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞"""
    while True:
        try:
            async with SessionLocal() as session:
                accounts = await session.execute("SELECT * FROM accounts")
                for account in accounts:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞
                    is_active = await check_account_status(account.account_id)
                    if not is_active:
                        await update_account_status(account.account_id, AccountStatus.Error)
                        print(f"[monitor] –ê–∫–∫–∞—É–Ω—Ç {account.account_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π")
            
            # –ñ–¥–µ–º 24 —á–∞—Å–∞
            await asyncio.sleep(24 * 60 * 60)
        except Exception as e:
            print(f"[monitor] –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            await asyncio.sleep(60 * 60)  # –ñ–¥–µ–º —á–∞—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ

def safe_truncate(text, max_length):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç"""
    if not text:
        return ""
    return text[:max_length] + "..." if len(text) > max_length else text

def classify_theme(text):
    """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ç–µ–º—É –ø–æ—Å—Ç–∞"""
    text_lower = text.lower()
    for theme, keywords in THEMES.items():
        if any(keyword in text_lower for keyword in keywords):
            return theme
    return "–î—Ä—É–≥–æ–µ"

def load_tasks():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(TASKS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return []

def save_tasks(tasks):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏ –≤ —Ñ–∞–π–ª"""
    with open(TASKS_FILE, 'w', encoding='utf-8') as f:
        json.dump(tasks, f, ensure_ascii=False, indent=2)

def save_result(user_id, channel, stat_text, all_posts):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞"""
    result = {
        "user_id": user_id,
        "channel": channel,
        "stats": stat_text,
        "posts": all_posts,
        "timestamp": datetime.datetime.now().isoformat()
    }
    
    filename = f"results/analysis_{user_id}_{channel}.json"
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(result, f, ensure_ascii=False, indent=2)

async def process_task(task):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    user_id = task.get('user_id')
    channel = task.get('channel')
    
    print(f"[parser] –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞: {channel}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        chat = await app.get_chat(channel)
        await save_channel_and_snapshot(chat)
        
        # –ü–∞—Ä—Å–∏–º –ø–æ—Å—Ç—ã
        posts = []
        async for message in app.get_chat_history(channel, limit=100):
            if message.text or message.caption:
                await save_post_and_snapshot(chat.id, message)
                
                post_data = {
                    "id": message.id,
                    "text": message.text or message.caption or "",
                    "date": message.date.isoformat(),
                    "views": getattr(message, 'views', 0),
                    "reactions": {r.emoji: r.count for r in message.reactions.reactions} if message.reactions else {},
                    "forwards": getattr(message, 'forwards', 0)
                }
                posts.append(post_data)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_views = sum(p['views'] for p in posts)
        total_reactions = sum(sum(p['reactions'].values()) for p in posts)
        avg_views = total_views / len(posts) if posts else 0
        engagement_rate = (total_reactions / total_views * 100) if total_views > 0 else 0
        
        stat_text = f"""
üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–ù–ê–õ–ê: {chat.title}

üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {getattr(chat, 'members_count', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
üìù –ü–æ—Å—Ç–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(posts)}
üëÄ –û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {total_views:,}
‚ù§Ô∏è –û–±—â–∏–µ —Ä–µ–∞–∫—Ü–∏–∏: {total_reactions}
üìä –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {avg_views:,.0f}
üéØ –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: {engagement_rate:.2f}%

üî• –¢–û–ü-5 –ü–û–°–¢–û–í –ü–û –ü–†–û–°–ú–û–¢–†–ê–ú:
"""
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
        top_posts = sorted(posts, key=lambda x: x['views'], reverse=True)[:5]
        for i, post in enumerate(top_posts, 1):
            text_preview = safe_truncate(post['text'], 100)
            stat_text += f"{i}. {post['views']:,} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ | {text_preview}\n"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        save_result(user_id, channel, stat_text, posts)
        
        print(f"[parser] –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {channel}")
        return {"success": True, "stats": stat_text, "posts": posts}
        
    except Exception as e:
        print(f"[parser] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {channel}: {e}")
        return {"success": False, "error": str(e)}

async def main_loop():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    print("[parser] –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    asyncio.create_task(monitor_accounts())
    
    while True:
        try:
            tasks = load_tasks()
            if tasks:
                task = tasks.pop(0)
                save_tasks(tasks)
                
                result = await process_task(task)
                print(f"[parser] –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            
            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            
        except Exception as e:
            print(f"[parser] –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

if __name__ == "__main__":
    async def runner():
        async with app:
            await main_loop()
    
    asyncio.run(runner()) 