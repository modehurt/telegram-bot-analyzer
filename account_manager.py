import asyncio
import uuid
import datetime
from typing import Dict, List, Optional
from pyrogram import Client
from bot.db import SessionLocal, Account, AccountStatus, Channel, AccountChannel
from config import PYROGRAM_API_ID, PYROGRAM_API_HASH

class AccountManager:
    def __init__(self):
        self.accounts: Dict[str, Client] = {}
        self.account_limits = {
            "max_channels_per_account": 50,
            "max_requests_per_hour": 100,
            "max_requests_per_day": 1000
        }
    
    async def initialize_accounts(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã"""
        async with SessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ –ë–î
            accounts = await session.execute("SELECT * FROM accounts WHERE status = 'Active'")
            
            for account_data in accounts:
                account_id = account_data.account_id
                session_file = account_data.session_file_path
                
                try:
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
                    client = Client(
                        session_file,
                        api_id=PYROGRAM_API_ID,
                        api_hash=PYROGRAM_API_HASH
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
                    await client.start()
                    
                    self.accounts[account_id] = client
                    print(f"[account_manager] –ê–∫–∫–∞—É–Ω—Ç {account_id} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    
                except Exception as e:
                    print(f"[account_manager] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")
                    # –ü–æ–º–µ—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
                    await self.update_account_status(account_id, AccountStatus.Error)
    
    async def get_available_account(self) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã"""
        async with SessionLocal() as session:
            # –ò—â–µ–º –∞–∫–∫–∞—É–Ω—Ç —Å –Ω–∞–∏–º–µ–Ω—å—à–µ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
            accounts = await session.execute("""
                SELECT a.account_id, COUNT(ac.channel_id) as channel_count
                FROM accounts a
                LEFT JOIN account_channels ac ON a.account_id = ac.account_id
                WHERE a.status = 'Active'
                GROUP BY a.account_id
                ORDER BY channel_count ASC
                LIMIT 1
            """)
            
            for account in accounts:
                account_id = account.account_id
                channel_count = account.channel_count or 0
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
                if channel_count < self.account_limits["max_channels_per_account"]:
                    return account_id
        
        return None
    
    async def subscribe_to_channel(self, account_id: str, channel_username: str) -> bool:
        """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –∫–∞–Ω–∞–ª"""
        try:
            client = self.accounts.get(account_id)
            if not client:
                return False
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª
            chat = await client.get_chat(channel_username)
            await client.join_chat(chat.id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –≤ –ë–î
            async with SessionLocal() as session:
                # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª
                channel = await session.get(Channel, str(chat.id))
                if not channel:
                    channel = Channel(
                        channel_id=str(chat.id),
                        username=chat.username or str(chat.id),
                        title=chat.title or chat.username or str(chat.id),
                        description=getattr(chat, 'description', None),
                        is_bot_admin=False
                    )
                    session.add(channel)
                    await session.commit()
                
                # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å –∞–∫–∫–∞—É–Ω—Ç-–∫–∞–Ω–∞–ª
                account_channel = AccountChannel(
                    id=str(uuid.uuid4()),
                    account_id=account_id,
                    channel_id=str(chat.id),
                    subscribed_at=datetime.datetime.utcnow()
                )
                session.add(account_channel)
                await session.commit()
            
            print(f"[account_manager] –ê–∫–∫–∞—É–Ω—Ç {account_id} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ {channel_username}")
            return True
            
        except Exception as e:
            print(f"[account_manager] –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ {account_id} –Ω–∞ {channel_username}: {e}")
            return False
    
    async def parse_channel_posts(self, account_id: str, channel_username: str, limit: int = 100) -> List[Dict]:
        """–ü–∞—Ä—Å–∏—Ç –ø–æ—Å—Ç—ã –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç"""
        try:
            client = self.accounts.get(account_id)
            if not client:
                return []
            
            posts = []
            async for message in client.get_chat_history(channel_username, limit=limit):
                if message.text or message.caption:
                    post_data = {
                        "id": message.id,
                        "text": message.text or message.caption or "",
                        "date": message.date.isoformat(),
                        "views": getattr(message, 'views', 0),
                        "reactions": {r.emoji: r.count for r in message.reactions.reactions} if message.reactions else {},
                        "forwards": getattr(message, 'forwards', 0),
                        "is_ad": self.detect_ad_post(message.text or message.caption or ""),
                        "format": self.detect_post_format(message.text or message.caption or ""),
                        "cta": self.extract_cta(message.text or message.caption or "")
                    }
                    posts.append(post_data)
            
            return posts
            
        except Exception as e:
            print(f"[account_manager] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {channel_username} —á–µ—Ä–µ–∑ {account_id}: {e}")
            return []
    
    def detect_ad_post(self, text: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ—Å—Ç —Ä–µ–∫–ª–∞–º–Ω—ã–º"""
        if not text:
            return False
        
        score = 0
        text_lower = text.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏
        if any(pattern in text for pattern in ['https://', 't.me/', '@', 'tg://']):
            score += 2
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CTA —Ñ—Ä–∞–∑—ã
        cta_phrases = ['–ø–æ–¥–ø–∏—à–∏—Å—å', '—á–∏—Ç–∞–π', '—É–∑–Ω–∞–π', '–Ω–∞—á–Ω–∏', '–ø–µ—Ä–µ–π–¥–∏', '–∂–º–∏', '–≤—Å—Ç—É–ø–∞–π']
        if any(phrase in text_lower for phrase in cta_phrases):
            score += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–æ–¥–∑–∏
        emoji_count = len([c for c in text if c in 'üî¥üîµ‚ö°‚ù§Ô∏èüíôüíöüíõüíúüñ§ü§çü§é'])
        if emoji_count / len(text) > 0.1:  # 10% —ç–º–æ–¥–∑–∏
            score += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤
        caps_count = len([c for c in text if c.isupper()])
        if caps_count / len(text) > 0.3:  # 30% –∑–∞–≥–ª–∞–≤–Ω—ã—Ö
            score += 1
        
        return score >= 3
    
    def detect_post_format(self, text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –ø–æ—Å—Ç–∞"""
        if not text:
            return "other"
        
        text_lower = text.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç—ã
        if any(pattern in text_lower for pattern in ['1.', '2.', '3.', '-', '‚Ä¢']):
            return "list"
        elif any(pattern in text_lower for pattern in ['–æ–¥–Ω–∞–∂–¥—ã', '—è –ø–æ–º–Ω—é', '–≤—á–µ—Ä–∞', '–∫–æ–≥–¥–∞-—Ç–æ']):
            return "story"
        elif any(pattern in text_lower for pattern in ['–ø–æ –¥–∞–Ω–Ω—ã–º', '—Ä–æ—Å—Ç', '%', '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ']):
            return "analytics"
        elif any(pattern in text_lower for pattern in ['–º–Ω–µ –∫–∞–∂–µ—Ç—Å—è', '–ø–æ –º–æ–µ–º—É –º–Ω–µ–Ω–∏—é', '—è –¥—É–º–∞—é']):
            return "opinion"
        elif any(pattern in text_lower for pattern in ['—Å–¥–µ–ª–∞–π', '–Ω–∞—Å—Ç—Ä–æ–π', '—Å–∫–∞—á–∞–π', '—à–∞–≥']):
            return "howto"
        elif any(pattern in text_lower for pattern in ['–ø—Ä–æ–∏–∑–æ—à–ª–æ', '—Å–µ–≥–æ–¥–Ω—è', '–ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º']):
            return "news"
        elif any(pattern in text_lower for pattern in ['—Ç—ã –º–æ–∂–µ—à—å', '–ø–æ–≤–µ—Ä—å –≤ —Å–µ–±—è', '–Ω–µ —Å–¥–∞–≤–∞–π—Å—è']):
            return "motivation"
        elif any(pattern in text_lower for pattern in ['–ª–æ–ª', '–∞—Ö–∞—Ö–∞', '–º–µ–º', '–ø—Ä–∏–∫–æ–ª']):
            return "fun"
        elif any(pattern in text_lower for pattern in ['‚Äî', '—Å–∫–∞–∑–∞–ª', '—Ü–∏—Ç–∞—Ç–∞']):
            return "quote"
        
        return "other"
    
    def extract_cta(self, text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç CTA –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        if not text:
            return None
        
        lines = text.split('\n')
        cta_patterns = [
            '–ø–æ–¥–ø–∏—à–∏—Å—å', '—Å–ª–µ–¥–∏ –∑–∞', '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è', '–∂–º–∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è',
            '–ø–∏—à–∏ –≤ –∫–æ–º–º–µ–Ω—Ç—ã', '–æ—Ü–µ–Ω–∏', '—Å–º–æ—Ç—Ä–∏ –¥–∞–ª—å—à–µ', '—Å–æ—Ö—Ä–∞–Ω–∏',
            '–∂–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É', '–∞ —Ç—ã –∫–∞–∫ –¥—É–º–∞–µ—à—å?', '–ø–∏—à–∏ + –µ—Å–ª–∏ –ø–æ–ª–µ–∑–Ω–æ',
            '—á—Ç–æ —Å–∫–∞–∂–µ—à—å?', '—á–∏—Ç–∞–π', '—É–∑–Ω–∞–π', '–Ω–∞—á–Ω–∏', '–ø–µ—Ä–µ–π–¥–∏',
            '–∂–º–∏', '–≤—Å—Ç—É–ø–∞–π', '–ø–µ—Ä–µ—Ö–æ–¥–∏ —Å—é–¥–∞', '–∫–∞–Ω–∞–ª', '–±–æ—Ç'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1-3 —Å—Ç—Ä–æ–∫–∏
        for i in range(min(3, len(lines))):
            line = lines[-(i+1)].strip()
            for pattern in cta_patterns:
                if pattern in line.lower():
                    return line
        
        return None
    
    async def update_account_status(self, account_id: str, status: AccountStatus):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞"""
        async with SessionLocal() as session:
            account = await session.get(Account, account_id)
            if account:
                account.status = status
                account.last_used_at = datetime.datetime.utcnow()
                await session.commit()
    
    async def monitor_accounts(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞"""
        while True:
            try:
                async with SessionLocal() as session:
                    accounts = await session.execute("SELECT * FROM accounts")
                    
                    for account_data in accounts:
                        account_id = account_data.account_id
                        client = self.accounts.get(account_id)
                        
                        if client:
                            try:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
                                me = await client.get_me()
                                print(f"[monitor] –ê–∫–∫–∞—É–Ω—Ç {account_id} –∞–∫—Ç–∏–≤–µ–Ω: {me.username}")
                            except Exception as e:
                                print(f"[monitor] –ê–∫–∫–∞—É–Ω—Ç {account_id} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω: {e}")
                                await self.update_account_status(account_id, AccountStatus.Error)
                        else:
                            print(f"[monitor] –ê–∫–∫–∞—É–Ω—Ç {account_id} –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
                # –ñ–¥–µ–º 24 —á–∞—Å–∞
                await asyncio.sleep(24 * 60 * 60)
                
            except Exception as e:
                print(f"[monitor] –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(60 * 60)  # –ñ–¥–µ–º —á–∞—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def distribute_channels(self, channels: List[str]) -> Dict[str, List[str]]:
        """–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–Ω–∞–ª—ã –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º"""
        distribution = {}
        
        async with SessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–∞–Ω–∞–ª–æ–≤
            accounts = await session.execute("""
                SELECT a.account_id, COUNT(ac.channel_id) as channel_count
                FROM accounts a
                LEFT JOIN account_channels ac ON a.account_id = ac.account_id
                WHERE a.status = 'Active'
                GROUP BY a.account_id
                ORDER BY channel_count ASC
            """)
            
            account_list = [(acc.account_id, acc.channel_count or 0) for acc in accounts]
            
            if not account_list:
                print("[account_manager] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                return {}
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª—ã
            for i, channel in enumerate(channels):
                account_id = account_list[i % len(account_list)][0]
                if account_id not in distribution:
                    distribution[account_id] = []
                distribution[account_id].append(channel)
        
        return distribution
    
    async def close_all_accounts(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã"""
        for account_id, client in self.accounts.items():
            try:
                await client.stop()
                print(f"[account_manager] –ê–∫–∫–∞—É–Ω—Ç {account_id} –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                print(f"[account_manager] –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")
        
        self.accounts.clear()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
account_manager = AccountManager() 