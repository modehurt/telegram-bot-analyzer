#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö Telegram –∞–∫–∫–∞—É–Ω—Ç–æ–≤
"""

import asyncio
import uuid
import datetime
from typing import List, Dict
from pyrogram import Client
from bot.db import SessionLocal, Account, AccountStatus, init_db
from config import PYROGRAM_API_ID, PYROGRAM_API_HASH

# –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
ACCOUNTS_DATA = [
    {
        "phone": "+79001234567",
        "session": "account1",
        "description": "–û—Å–Ω–æ–≤–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç 1"
    },
    {
        "phone": "+79001234568", 
        "session": "account2",
        "description": "–û—Å–Ω–æ–≤–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç 2"
    },
    {
        "phone": "+79001234569",
        "session": "account3", 
        "description": "–û—Å–Ω–æ–≤–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç 3"
    },
    {
        "phone": "+79001234570",
        "session": "account4",
        "description": "–û—Å–Ω–æ–≤–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç 4"
    },
    {
        "phone": "+79001234571",
        "session": "account5",
        "description": "–û—Å–Ω–æ–≤–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç 5"
    },
    {
        "phone": "+79001234572",
        "session": "account6",
        "description": "–û—Å–Ω–æ–≤–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç 6"
    },
    {
        "phone": "+79001234573",
        "session": "account7",
        "description": "–û—Å–Ω–æ–≤–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç 7"
    },
    {
        "phone": "+79001234574",
        "session": "account8",
        "description": "–û—Å–Ω–æ–≤–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç 8"
    },
    {
        "phone": "+79001234575",
        "session": "account9",
        "description": "–û—Å–Ω–æ–≤–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç 9"
    },
    {
        "phone": "+79001234576",
        "session": "account10",
        "description": "–û—Å–Ω–æ–≤–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç 10"
    },
    {
        "phone": "+79001234577",
        "session": "account11",
        "description": "–†–µ–∑–µ—Ä–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç 1"
    },
    {
        "phone": "+79001234578",
        "session": "account12", 
        "description": "–†–µ–∑–µ—Ä–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç 2"
    },
    {
        "phone": "+79001234579",
        "session": "account13",
        "description": "–†–µ–∑–µ—Ä–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç 3"
    },
    {
        "phone": "+79001234580",
        "session": "account14",
        "description": "–†–µ–∑–µ—Ä–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç 4"
    },
    {
        "phone": "+79001234581",
        "session": "account15",
        "description": "–†–µ–∑–µ—Ä–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç 5"
    }
]

async def create_account_in_db(account_data: Dict) -> bool:
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        async with SessionLocal() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç
            existing_account = await session.get(Account, account_data["session"])
            if existing_account:
                print(f"[DB] –ê–∫–∫–∞—É–Ω—Ç {account_data['session']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î")
                return True
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
            account = Account(
                account_id=account_data["session"],
                phone_number=account_data["phone"],
                session_file_path=f"{account_data['session']}.session",
                status=AccountStatus.Active,
                is_logged_in=False,
                total_channels=0,
                last_used_at=None,
                created_at=datetime.datetime.utcnow()
            )
            
            session.add(account)
            await session.commit()
            
            print(f"[DB] –ê–∫–∫–∞—É–Ω—Ç {account_data['session']} —Å–æ–∑–¥–∞–Ω –≤ –ë–î")
            return True
            
    except Exception as e:
        print(f"[DB] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_data['session']}: {e}")
        return False

async def initialize_account(account_data: Dict) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç"""
    try:
        print(f"[INIT] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_data['session']}...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = Client(
            account_data["session"],
            api_id=PYROGRAM_API_ID,
            api_hash=PYROGRAM_API_HASH
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        await client.start()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        me = await client.get_me()
        
        print(f"[INIT] –ê–∫–∫–∞—É–Ω—Ç {account_data['session']} —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: @{me.username}")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        await client.stop()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
        await create_account_in_db(account_data)
        
        return True
        
    except Exception as e:
        print(f"[INIT] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_data['session']}: {e}")
        return False

async def initialize_all_accounts():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã"""
    print("üöÄ –ù–∞—á–∏–Ω–∞—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Telegram –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await init_db()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    success_count = 0
    total_count = len(ACCOUNTS_DATA)
    
    for i, account_data in enumerate(ACCOUNTS_DATA, 1):
        print(f"\n[{i}/{total_count}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_data['session']}...")
        
        if await initialize_account(account_data):
            success_count += 1
            print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account_data['session']} —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_data['session']}")
        
        # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        await asyncio.sleep(5)
    
    print(f"\nüéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}/{total_count}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {total_count - success_count}")
    
    if success_count > 0:
        print(f"\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print(f"1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ session —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ")
        print(f"2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: python monitor_accounts.py")
        print(f"3. –ù–∞—á–Ω–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥: python userbot_stats.py")

async def check_accounts_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
    
    async with SessionLocal() as session:
        accounts = await session.execute("SELECT * FROM accounts")
        
        active_count = 0
        banned_count = 0
        error_count = 0
        
        for account_data in accounts:
            status = account_data.status
            if status == AccountStatus.Active:
                active_count += 1
            elif status == AccountStatus.Banned:
                banned_count += 1
            elif status == AccountStatus.Error:
                error_count += 1
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:")
        print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ: {active_count}")
        print(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {banned_count}")
        print(f"‚ö†Ô∏è –° –æ—à–∏–±–∫–∞–º–∏: {error_count}")
        print(f"üìà –í—Å–µ–≥–æ: {active_count + banned_count + error_count}")

async def test_account_connection(account_id: str):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}...")
        
        client = Client(
            account_id,
            api_id=PYROGRAM_API_ID,
            api_hash=PYROGRAM_API_HASH
        )
        
        await client.start()
        me = await client.get_me()
        await client.stop()
        
        print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account_id} —Ä–∞–±–æ—Ç–∞–µ—Ç: @{me.username}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import sys
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "init":
            await initialize_all_accounts()
        elif command == "status":
            await check_accounts_status()
        elif command == "test":
            if len(sys.argv) > 2:
                account_id = sys.argv[2]
                await test_account_connection(account_id)
            else:
                print("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                print("–ü—Ä–∏–º–µ—Ä: python init_accounts.py test account1")
        else:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
            print("  init   - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã")
            print("  status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            print("  test   - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞")
    else:
        print("üîß –°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("  python init_accounts.py init   - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã")
        print("  python init_accounts.py status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        print("  python init_accounts.py test account1 - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
        print("\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –î–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")

if __name__ == "__main__":
    asyncio.run(main()) 