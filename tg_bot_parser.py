import json
import os
import time
from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from PIL import Image
import asyncio
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy import select, update, delete

from config import BOT_TOKEN, CATEGORIES, FORMATS, FREE_LIMIT, PRO_FEATURES, PRO_PRICE, PAYMENT_TOKEN
from gpt_service import gpt_service
from data_analyzer import data_analyzer
from subscription_service import subscription_service
from payment_service import payment_service
from channel_analyzer import channel_analyzer

TASKS_FILE = "tasks.json"
RESULTS_DIR = "results"

os.makedirs(RESULTS_DIR, exist_ok=True)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î ---
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql+asyncpg://tguser:tgpass@localhost:5432/tgstat")
engine = create_async_engine(DATABASE_URL, echo=False)
SessionLocal = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)
Base = declarative_base()

# --- –ú–æ–¥–µ–ª–∏ ---
from sqlalchemy import Column, Integer, String, BigInteger
from sqlalchemy.ext.declarative import declarative_base
Base = declarative_base()
class Group(Base):
    __tablename__ = "groups"
    id = Column(Integer, primary_key=True, index=True)
    group_id = Column(BigInteger, unique=True, index=True)
    title = Column(String)
    category = Column(String)

# --- Free/PRO –ª–∏–º–∏—Ç—ã ---
def check_user_limit(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return subscription_service.check_limit(user_id)

def get_user_info(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    return subscription_service.get_subscription_info(user_id)

# --- –ö–æ–º–∞–Ω–¥—ã POSTS ---
async def post_idea(client: Client, message: Message):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–¥–µ–∏ –ø–æ—Å—Ç–æ–≤"""
    user_id = message.from_user.id
    user_info = get_user_info(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    if not check_user_limit(user_id):
        remaining = user_info.get('remaining_requests', 0)
        limit = user_info.get('daily_limit', FREE_LIMIT)
        await message.reply_text(
            f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ({limit} –≤ –¥–µ–Ω—å).\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining}\n"
            "–û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!"
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –≤ –≤–∏–¥–µ inline –∫–Ω–æ–ø–æ–∫
    keyboard = []
    for i, cat in enumerate(CATEGORIES):
        keyboard.append([InlineKeyboardButton(cat, callback_data=f"post_idea_cat_{i}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    keyboard.append([InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Ç–µ–º—É –≤—Ä—É—á–Ω—É—é", callback_data="post_idea_manual")])
    
    await message.reply_text(
        "üí° **–ò–î–ï–ò –î–õ–Ø –ü–û–°–¢–û–í**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –≤—Ä—É—á–Ω—É—é:\n\n"
        f"üÜì **FREE**: {FREE_LIMIT} —Ä–∞–∑ –≤ –¥–µ–Ω—å\n"
        f"‚≠ê **PRO**: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def post_idea_cat_callback(client: Client, callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–¥–µ–∏ –ø–æ—Å—Ç–∞"""
    await callback_query.answer()
    user_id = callback_query.from_user.id
    user_info = get_user_info(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    if not check_user_limit(user_id):
        remaining = user_info.get('remaining_requests', 0)
        limit = user_info.get('daily_limit', FREE_LIMIT)
        await callback_query.edit_message_text(
            f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ({limit} –≤ –¥–µ–Ω—å).\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining}\n"
            "–û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!"
        )
        return
    
    idx = int(callback_query.data.split('_')[-1])
    category = CATEGORIES[idx]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await callback_query.edit_message_text(f"ü§î –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ—é –¥–ª—è –ø–æ—Å—Ç–∞ –ø–æ —Ç–µ–º–µ: {category}...")
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–¥–µ—é
        is_pro = user_info.get('is_pro', False)
        
        if is_pro:
            # PRO –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            idea = await gpt_service.generate_post_idea_pro(category, user_id)
        else:
            # FREE –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –±–∞–∑–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            idea = await gpt_service.generate_post_idea(category)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_text = f"üí° **–ò–î–ï–Ø –î–õ–Ø –ü–û–°–¢–ê**\n\n"
        response_text += f"üìÇ **–¢–µ–º–∞**: {category}\n"
        response_text += f"üë§ **–¢–∏–ø**: {'‚≠ê PRO' if is_pro else 'üÜì FREE'}\n\n"
        response_text += f"{idea}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–¥–µ—è", callback_data=f"post_idea_cat_{idx}")],
            [InlineKeyboardButton("üìù –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∏–¥–µ—é", callback_data=f"expand_idea_{idx}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await callback_query.edit_message_text(
            response_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
    except Exception as e:
        await callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–∏: {str(e)}")

async def handle_post_idea_topic(client: Client, message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–µ–º—ã –¥–ª—è –∏–¥–µ–∏ –ø–æ—Å—Ç–∞"""
    user_id = message.from_user.id
    user_info = get_user_info(user_id)
    topic = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    if not check_user_limit(user_id):
        remaining = user_info.get('remaining_requests', 0)
        limit = user_info.get('daily_limit', FREE_LIMIT)
        await message.reply_text(
            f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ({limit} –≤ –¥–µ–Ω—å).\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining}\n"
            "–û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!"
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    loading_msg = await message.reply_text(f"ü§î –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ—é –¥–ª—è –ø–æ—Å—Ç–∞ –ø–æ —Ç–µ–º–µ: {topic}...")
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–¥–µ—é
        is_pro = user_info.get('is_pro', False)
        
        if is_pro:
            # PRO –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            idea = await gpt_service.generate_post_idea_pro(topic, user_id)
        else:
            # FREE –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –±–∞–∑–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            idea = await gpt_service.generate_post_idea(topic)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_text = f"üí° **–ò–î–ï–Ø –î–õ–Ø –ü–û–°–¢–ê**\n\n"
        response_text += f"üìÇ **–¢–µ–º–∞**: {topic}\n"
        response_text += f"üë§ **–¢–∏–ø**: {'‚≠ê PRO' if is_pro else 'üÜì FREE'}\n\n"
        response_text += f"{idea}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–¥–µ—è", callback_data="post_idea_manual")],
            [InlineKeyboardButton("üìù –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∏–¥–µ—é", callback_data=f"expand_idea_manual_{topic}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await loading_msg.edit_text(
            response_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
    except Exception as e:
        await loading_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–∏: {str(e)}")

async def popular_posts(client: Client, message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç—ã"""
    user_id = message.from_user.id
    if not check_user_limit(user_id):
        await message.reply_text("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    keyboard = [[InlineKeyboardButton(cat, callback_data=f"popular_posts_cat_{i}")] for i, cat in enumerate(CATEGORIES)]
    await message.reply_text(
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def popular_posts_cat_callback(client: Client, callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    await callback_query.answer()
    idx = int(callback_query.data.split('_')[-1])
    category = CATEGORIES[idx]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await callback_query.edit_message_text(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç—ã –ø–æ —Ç–µ–º–µ: {category}...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î —á–µ—Ä–µ–∑ data_analyzer
        posts_data = await data_analyzer.get_popular_posts_by_category(category)
        
        if not posts_data:
            await callback_query.edit_message_text(f"üìä –ü–û–ü–£–õ–Ø–†–ù–´–ï –ü–û–°–¢–´\n\n–¢–µ–º–∞: {category}\n\n‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã –≤ –±–∞–∑—É.")
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é GPT
        analysis = await gpt_service.analyze_popular_posts(category, posts_data)
        
        response_text = f"üìä –ü–û–ü–£–õ–Ø–†–ù–´–ï –ü–û–°–¢–´\n\n–¢–µ–º–∞: {category}\n\n{analysis}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("üîÑ –î—Ä—É–≥–∞—è —Ç–µ–º–∞", callback_data=f"popular_posts_cat_{idx}")],
            [InlineKeyboardButton("üìù –§–æ—Ä–º–∞—Ç—ã –ø–æ—Å—Ç–æ–≤", callback_data=f"post_format_cat_{idx}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await callback_query.edit_message_text(
            response_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        await callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å—Ç–æ–≤: {str(e)}")

async def post_format(client: Client, message: Message):
    """–û–±—ä—è—Å–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã –ø–æ—Å—Ç–æ–≤"""
    user_id = message.from_user.id
    if not check_user_limit(user_id):
        await message.reply_text("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    keyboard = [[InlineKeyboardButton(fmt, callback_data=f"post_format_type_{i}")] for i, fmt in enumerate(FORMATS)]
    await message.reply_text(
        "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def post_format_callback(client: Client, callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ—Å—Ç–∞"""
    await callback_query.answer()
    idx = int(callback_query.data.split('_')[-1])
    format_type = FORMATS[idx]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await callback_query.edit_message_text(f"üìù –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞: {format_type}...")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é GPT
        explanation = await gpt_service.suggest_post_format(format_type)
        
        response_text = f"üìù –§–û–†–ú–ê–¢ –ü–û–°–¢–ê: {format_type.upper()}\n\n{explanation}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç", callback_data=f"post_format_type_{idx}")],
            [InlineKeyboardButton("üí° –ò–¥–µ—è –ø–æ—Å—Ç–∞", callback_data=f"post_idea_cat_0")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await callback_query.edit_message_text(
            response_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        await callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è: {str(e)}")

# --- –ö–æ–º–∞–Ω–¥—ã ADS ---
async def ad_ideas(client: Client, message: Message):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∏–¥–µ–∏"""
    user_id = message.from_user.id
    if not check_user_limit(user_id):
        await message.reply_text("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    keyboard = [[InlineKeyboardButton(cat, callback_data=f"ad_ideas_cat_{i}")] for i, cat in enumerate(CATEGORIES)]
    await message.reply_text(
        "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É —Ä–µ–∫–ª–∞–º—ã –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def ad_ideas_cat_callback(client: Client, callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∏–¥–µ–π"""
    await callback_query.answer()
    idx = int(callback_query.data.split('_')[-1])
    category = CATEGORIES[idx]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await callback_query.edit_message_text(f"üí° –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∏–¥–µ–∏ –¥–ª—è —Ç–µ–º—ã: {category}...")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∏–¥–µ–∏ —Å –ø–æ–º–æ—â—å—é GPT
        ideas = await gpt_service.generate_ad_ideas(category)
        
        response_text = f"üéØ –†–ï–ö–õ–ê–ú–ù–´–ï –ò–î–ï–ò\n\n–¢–µ–º–∞: {category}\n\n{ideas}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–µ –∏–¥–µ–∏", callback_data=f"ad_ideas_cat_{idx}")],
            [InlineKeyboardButton("üìù –ü—Ä–æ–º–æ-—Ç–µ–∫—Å—Ç", callback_data=f"promo_text_cat_{idx}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await callback_query.edit_message_text(
            response_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        await callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π: {str(e)}")

async def promo_text(client: Client, message: Message):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–æ-—Ç–µ–∫—Å—Ç—ã"""
    user_id = message.from_user.id
    if not check_user_limit(user_id):
        await message.reply_text("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    keyboard = [[InlineKeyboardButton(cat, callback_data=f"promo_text_cat_{i}")] for i, cat in enumerate(CATEGORIES)]
    await message.reply_text(
        "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def promo_text_cat_callback(client: Client, callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–º–æ-—Ç–µ–∫—Å—Ç–∞"""
    await callback_query.answer()
    idx = int(callback_query.data.split('_')[-1])
    category = CATEGORIES[idx]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await callback_query.edit_message_text(f"üìù –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ–º–æ-—Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ–º—ã: {category}...")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–æ-—Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é GPT
        promo_text = await gpt_service.generate_promo_text(category)
        
        response_text = f"üì¢ –ü–†–û–ú–û-–¢–ï–ö–°–¢\n\n–¢–µ–º–∞: {category}\n\n{promo_text}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç", callback_data=f"promo_text_cat_{idx}")],
            [InlineKeyboardButton("üí° –†–µ–∫–ª–∞–º–Ω—ã–µ –∏–¥–µ–∏", callback_data=f"ad_ideas_cat_{idx}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await callback_query.edit_message_text(
            response_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        await callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}")

async def top_cta(client: Client, message: Message):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª—É—á—à–∏–µ CTA"""
    user_id = message.from_user.id
    if not check_user_limit(user_id):
        await message.reply_text("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    keyboard = [[InlineKeyboardButton(cat, callback_data=f"top_cta_cat_{i}")] for i, cat in enumerate(CATEGORIES)]
    await message.reply_text(
        "üî• –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def top_cta_cat_callback(client: Client, callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ CTA"""
    await callback_query.answer()
    idx = int(callback_query.data.split('_')[-1])
    category = CATEGORIES[idx]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await callback_query.edit_message_text(f"üî• –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ª—É—á—à–∏–µ CTA –¥–ª—è —Ç–µ–º—ã: {category}...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        posts_data = await data_analyzer.get_popular_posts_by_category(category)
        
        if not posts_data:
            await callback_query.edit_message_text(f"üî• –õ–£–ß–®–ò–ï CTA\n\n–¢–µ–º–∞: {category}\n\n‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É.")
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º CTA —Å –ø–æ–º–æ—â—å—é GPT
        cta_analysis = await gpt_service.analyze_top_cta(category, posts_data)
        
        response_text = f"üî• –õ–£–ß–®–ò–ï CTA\n\n–¢–µ–º–∞: {category}\n\n{cta_analysis}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("üîÑ –î—Ä—É–≥–∞—è —Ç–µ–º–∞", callback_data=f"top_cta_cat_{idx}")],
            [InlineKeyboardButton("üí° –†–µ–∫–ª–∞–º–Ω—ã–µ –∏–¥–µ–∏", callback_data=f"ad_ideas_cat_{idx}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await callback_query.edit_message_text(
            response_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        await callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ CTA: {str(e)}")

# --- –ö–æ–º–∞–Ω–¥—ã TRENDS ---
async def trending_topics(client: Client, message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç–µ–º—ã"""
    user_id = message.from_user.id
    if not check_user_limit(user_id):
        await message.reply_text("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    keyboard = [[InlineKeyboardButton(cat, callback_data=f"trending_topics_cat_{i}")] for i, cat in enumerate(CATEGORIES)]
    await message.reply_text(
        "üìà –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def trending_topics_cat_callback(client: Client, callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Ç–µ–º"""
    await callback_query.answer()
    idx = int(callback_query.data.split('_')[-1])
    category = CATEGORIES[idx]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await callback_query.edit_message_text(f"üìà –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç–µ–º—ã –¥–ª—è: {category}...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç–µ–º—ã –∏–∑ –ë–î
        trending_data = await data_analyzer.get_trending_topics(category)
        
        if not trending_data:
            await callback_query.edit_message_text(f"üìà –¢–†–ï–ù–î–û–í–´–ï –¢–ï–ú–´\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é GPT
        analysis = await gpt_service.generate_trending_topics(category)
        
        response_text = f"üìà –¢–†–ï–ù–î–û–í–´–ï –¢–ï–ú–´\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n{analysis}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("üîÑ –î—Ä—É–≥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data=f"trending_topics_cat_{idx}")],
            [InlineKeyboardButton("üìä –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç—ã", callback_data=f"popular_posts_cat_{idx}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await callback_query.edit_message_text(
            response_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        await callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {str(e)}")

async def engagement_boost(client: Client, message: Message):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏–¥–µ–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏"""
    user_id = message.from_user.id
    if not check_user_limit(user_id):
        await message.reply_text("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    keyboard = [[InlineKeyboardButton(cat, callback_data=f"engagement_boost_cat_{i}")] for i, cat in enumerate(CATEGORIES)]
    await message.reply_text(
        "üöÄ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–¥–µ–π –ø–æ–≤—ã—à–µ–Ω–∏—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def engagement_boost_cat_callback(client: Client, callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–¥–µ–π –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏"""
    await callback_query.answer()
    idx = int(callback_query.data.split('_')[-1])
    category = CATEGORIES[idx]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await callback_query.edit_message_text(f"üöÄ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ç–µ–º–µ: {category}...")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–¥–µ–∏ —Å –ø–æ–º–æ—â—å—é GPT
        ideas = await gpt_service.suggest_engagement_boost(category)
        
        response_text = f"üöÄ –ò–î–ï–ò –î–õ–Ø –ü–û–í–´–®–ï–ù–ò–Ø –í–û–í–õ–ï–ß–ï–ù–ù–û–°–¢–ò\n\n–¢–µ–º–∞: {category}\n\n{ideas}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("üîÑ –î—Ä—É–≥–∏–µ –∏–¥–µ–∏", callback_data=f"engagement_boost_cat_{idx}")],
            [InlineKeyboardButton("üìà –¢—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç–µ–º—ã", callback_data=f"trending_topics_cat_{idx}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await callback_query.edit_message_text(
            response_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        await callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π: {str(e)}")

# --- –ö–æ–º–∞–Ω–¥—ã ANALYZE MY CHANNEL (PRO) ---
async def channel_summary(client: Client, message: Message):
    """PRO: –°–≤–æ–¥–∫–∞ –ø–æ –∫–∞–Ω–∞–ª—É"""
    user_id = message.from_user.id
    user_info = get_user_info(user_id)
    
    if not user_info['is_pro']:
        await message.reply_text(
            "üîí –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ PRO –≤–µ—Ä—Å–∏–∏!\n\n"
            "üí° –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
            "‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—É—é —Å–≤–æ–¥–∫—É –ø–æ –≤–∞—à–µ–º—É –∫–∞–Ω–∞–ª—É\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫\n"
            "‚Ä¢ –û—Ü–µ–Ω–∫—É —Å–∏–ª—å–Ω—ã—Ö –∏ —Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω\n"
            "‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
            "üí≥ –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!"
        )
        return
    
    await message.reply_text(
        "üìä –°–í–û–î–ö–ê –ü–û –ö–ê–ù–ê–õ–£\n\n"
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏ –º–Ω–µ –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞.\n"
        "–í–≤–µ–¥–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @mychannel) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª."
    )

async def audience_report(client: Client, message: Message):
    """PRO: –û—Ç—á–µ—Ç –ø–æ –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
    user_id = message.from_user.id
    user_info = get_user_info(user_id)
    
    if not user_info['is_pro']:
        await message.reply_text(
            "üîí –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ PRO –≤–µ—Ä—Å–∏–∏!\n\n"
            "üí° –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
            "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞—É–¥–∏—Ç–æ—Ä–∏–∏\n"
            "‚Ä¢ –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ\n"
            "‚Ä¢ –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã\n"
            "‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π\n\n"
            "üí≥ –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!"
        )
        return
    
    await message.reply_text(
        "üë• –û–¢–ß–ï–¢ –ü–û –ê–£–î–ò–¢–û–†–ò–ò\n\n"
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –º–Ω–µ –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞.\n"
        "–í–≤–µ–¥–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @mychannel) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª."
    )

async def content_quality(client: Client, message: Message):
    """PRO: –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    user_id = message.from_user.id
    user_info = get_user_info(user_id)
    
    if not user_info['is_pro']:
        await message.reply_text(
            "üîí –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ PRO –≤–µ—Ä—Å–∏–∏!\n\n"
            "üí° –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
            "‚Ä¢ –û—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–∏–ª—å–Ω—ã—Ö –∏ —Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω\n"
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é\n"
            "‚Ä¢ –ü–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n\n"
            "üí≥ –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!"
        )
        return
    
    await message.reply_text(
        "üìù –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –ö–û–ù–¢–ï–ù–¢–ê\n\n"
        "–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–Ω–µ –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞.\n"
        "–í–≤–µ–¥–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @mychannel) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª."
    )

async def style_review(client: Client, message: Message):
    """PRO: –ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    user_id = message.from_user.id
    user_info = get_user_info(user_id)
    
    if not user_info['is_pro']:
        await message.reply_text(
            "üîí –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ PRO –≤–µ—Ä—Å–∏–∏!\n\n"
            "üí° –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è –∏ —Ç–æ–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
            "‚Ä¢ –û—Ü–µ–Ω–∫—É —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏\n"
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—é\n"
            "‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –ø–æ–¥–∞—á–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n\n"
            "üí≥ –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!"
        )
        return
    
    await message.reply_text(
        "üé® –ê–ù–ê–õ–ò–ó –°–¢–ò–õ–Ø –ö–û–ù–¢–ï–ù–¢–ê\n\n"
        "–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∏–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–Ω–µ –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞.\n"
        "–í–≤–µ–¥–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @mychannel) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª."
    )

# --- –ö–æ–º–∞–Ω–¥—ã –ø–æ–¥–ø–∏—Å–∫–∏ ---
async def subscription_info(client: Client, message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
    user_id = message.from_user.id
    user_info = get_user_info(user_id)
    
    remaining = user_info['remaining_requests']
    limit = user_info['daily_limit']
    is_pro = user_info['is_pro']
    
    status_text = "üîí FREE" if not is_pro else "üíé PRO"
    
    response_text = f"üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–î–ü–ò–°–ö–ï\n\n"
    response_text += f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
    response_text += f"–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining}/{limit}\n"
    
    if is_pro:
        response_text += f"\n‚úÖ PRO —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        for feature in user_info['pro_features']:
            response_text += f"‚Ä¢ {feature}\n"
    else:
        response_text += f"\nüí° –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è:\n"
        response_text += f"‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        response_text += f"‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏\n"
        response_text += f"‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤\n"
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ PRO", callback_data="upgrade_pro")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await message.reply_text(
        response_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def upgrade_pro(client: Client, message: Message):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ PRO"""
    user_id = message.from_user.id
    user_info = get_user_info(user_id)
    
    if user_info['is_pro']:
        await message.reply_text("üíé –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å PRO –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!")
        return
    
    response_text = f"üíé –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–û PRO\n\n"
    response_text += f"–¶–µ–Ω–∞: {PRO_PRICE}‚ÇΩ/–º–µ—Å—è—Ü\n"
    response_text += f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {PRO_DURATION_DAYS} –¥–Ω–µ–π\n\n"
    response_text += f"‚úÖ –ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:\n"
    for feature in PRO_FEATURES:
        response_text += f"‚Ä¢ {feature}\n"
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="process_payment")],
        [InlineKeyboardButton("üé´ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="apply_promocode")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await message.reply_text(
        response_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# --- V2 –§–£–ù–ö–¶–ò–ò (POSTS) ---
async def post_feedback(client: Client, message: Message):
    """V2: –ê–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    user_info = get_user_info(user_id)
    
    if not user_info['is_pro']:
        await message.reply_text(
            "üîí –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ PRO –≤–µ—Ä—Å–∏–∏!\n\n"
            "üí° –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
            "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞\n"
            "‚Ä¢ –û—Ü–µ–Ω–∫—É –ø–æ 10 –∫—Ä–∏—Ç–µ—Ä–∏—è–º\n"
            "‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
            "‚Ä¢ –ü–ª–∞–Ω —É–ª—É—á—à–µ–Ω–∏—è\n\n"
            "üí≥ –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!"
        )
        return
    
    await message.reply_text(
        "üìù –ê–ù–ê–õ–ò–ó –ü–û–°–¢–ê (V2)\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å.\n"
        "–Ø –¥–∞–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é."
    )

async def rewrite_post(client: Client, message: Message):
    """V2: –£–ª—É—á—à–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    user_info = get_user_info(user_id)
    
    if not user_info['is_pro']:
        await message.reply_text(
            "üîí –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ PRO –≤–µ—Ä—Å–∏–∏!\n\n"
            "üí° –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
            "‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞\n"
            "‚Ä¢ –ë–æ–ª–µ–µ —Ü–µ–ø–ª—è—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫\n"
            "‚Ä¢ –£—Å–∏–ª–µ–Ω–Ω—ã–π –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é\n"
            "‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É\n\n"
            "üí≥ –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!"
        )
        return
    
    await message.reply_text(
        "‚úçÔ∏è –£–õ–£–ß–®–ï–ù–ò–ï –ü–û–°–¢–ê (V2)\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–ª—É—á—à–∏—Ç—å.\n"
        "–Ø —Å–æ–∑–¥–∞–º –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –≤–µ—Ä—Å–∏—é —Å –ª—É—á—à–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å—é."
    )

# --- V2 –§–£–ù–ö–¶–ò–ò (ADS) ---
async def ad_tips(client: Client, message: Message):
    """V2: –°–æ–≤–µ—Ç—ã –ø–æ —Ä–µ–∫–ª–∞–º–µ"""
    user_id = message.from_user.id
    if not check_user_limit(user_id):
        await message.reply_text("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    keyboard = [[InlineKeyboardButton(cat, callback_data=f"ad_tips_cat_{i}")] for i, cat in enumerate(CATEGORIES)]
    await message.reply_text(
        "üí° –í–´–ë–ï–†–ò–¢–ï –ö–ê–¢–ï–ì–û–†–ò–Æ –î–õ–Ø –°–û–í–ï–¢–û–í –ü–û –†–ï–ö–õ–ê–ú–ï:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def ad_tips_cat_callback(client: Client, callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —Ä–µ–∫–ª–∞–º–µ"""
    await callback_query.answer()
    idx = int(callback_query.data.split('_')[-1])
    category = CATEGORIES[idx]
    
    await callback_query.edit_message_text(f"üí° –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–æ–≤–µ—Ç—ã –ø–æ —Ä–µ–∫–ª–∞–º–µ –¥–ª—è: {category}...")
    
    try:
        tips = await gpt_service.generate_ad_tips(category)
        
        response_text = f"üí° –°–û–í–ï–¢–´ –ü–û –†–ï–ö–õ–ê–ú–ï (V2)\n\n–¢–µ–º–∞: {category}\n\n{tips}"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –î—Ä—É–≥–∏–µ —Å–æ–≤–µ—Ç—ã", callback_data=f"ad_tips_cat_{idx}")],
            [InlineKeyboardButton("üí∞ –†–µ–∫–ª–∞–º–Ω—ã–µ –∏–¥–µ–∏", callback_data=f"ad_ideas_cat_{idx}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await callback_query.edit_message_text(
            response_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        await callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–≤–µ—Ç–æ–≤: {str(e)}")

async def promo_plan(client: Client, message: Message):
    """V2: –ü–ª–∞–Ω –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è"""
    user_id = message.from_user.id
    if not check_user_limit(user_id):
        await message.reply_text("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    keyboard = [[InlineKeyboardButton(cat, callback_data=f"promo_plan_cat_{i}")] for i, cat in enumerate(CATEGORIES)]
    await message.reply_text(
        "üìã –í–´–ë–ï–†–ò–¢–ï –ö–ê–¢–ï–ì–û–†–ò–Æ –î–õ–Ø –ü–õ–ê–ù–ê –ü–†–û–î–í–ò–ñ–ï–ù–ò–Ø:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def promo_plan_cat_callback(client: Client, callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–ª–∞–Ω–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è"""
    await callback_query.answer()
    idx = int(callback_query.data.split('_')[-1])
    category = CATEGORIES[idx]
    
    await callback_query.edit_message_text(f"üìã –°–æ–∑–¥–∞—é –ø–ª–∞–Ω –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è: {category}...")
    
    try:
        plan = await gpt_service.generate_promo_plan(category)
        
        response_text = f"üìã –ü–õ–ê–ù –ü–†–û–î–í–ò–ñ–ï–ù–ò–Ø (V2)\n\n–¢–µ–º–∞: {category}\n\n{plan}"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–π –ø–ª–∞–Ω", callback_data=f"promo_plan_cat_{idx}")],
            [InlineKeyboardButton("üí° –†–µ–∫–ª–∞–º–Ω—ã–µ –∏–¥–µ–∏", callback_data=f"ad_ideas_cat_{idx}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await callback_query.edit_message_text(
            response_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        await callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞: {str(e)}")

async def ad_feedback(client: Client, message: Message):
    """V2: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∫—Ä–µ–∞—Ç–∏–≤–∞"""
    user_id = message.from_user.id
    user_info = get_user_info(user_id)
    
    if not user_info['is_pro']:
        await message.reply_text(
            "üîí –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ PRO –≤–µ—Ä—Å–∏–∏!\n\n"
            "üí° –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∫—Ä–µ–∞—Ç–∏–≤–∞\n"
            "‚Ä¢ –û—Ü–µ–Ω–∫—É —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é\n"
            "‚Ä¢ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–¥–µ–π\n\n"
            "üí≥ –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!"
        )
        return
    
    await message.reply_text(
        "üìä –ê–ù–ê–õ–ò–ó –†–ï–ö–õ–ê–ú–ù–û–ì–û –ö–†–ï–ê–¢–ò–í–ê (V2)\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ä–µ–∫–ª–∞–º–Ω—ã–π –∫—Ä–µ–∞—Ç–∏–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n"
        "–Ø –æ—Ü–µ–Ω—é –µ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é."
    )

# --- V2 –§–£–ù–ö–¶–ò–ò (TRENDS) ---
async def content_trends(client: Client, message: Message):
    """V2: –¢—Ä–µ–Ω–¥—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    user_id = message.from_user.id
    if not check_user_limit(user_id):
        await message.reply_text("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    keyboard = [[InlineKeyboardButton(cat, callback_data=f"content_trends_cat_{i}")] for i, cat in enumerate(CATEGORIES)]
    await message.reply_text(
        "üìà –í–´–ë–ï–†–ò–¢–ï –ö–ê–¢–ï–ì–û–†–ò–Æ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –¢–†–ï–ù–î–û–í –ö–û–ù–¢–ï–ù–¢–ê:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def content_trends_cat_callback(client: Client, callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    await callback_query.answer()
    idx = int(callback_query.data.split('_')[-1])
    category = CATEGORIES[idx]
    
    await callback_query.edit_message_text(f"üìà –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç—Ä–µ–Ω–¥—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è: {category}...")
    
    try:
        trends = await gpt_service.analyze_content_trends(category)
        
        response_text = f"üìà –¢–†–ï–ù–î–´ –ö–û–ù–¢–ï–ù–¢–ê (V2)\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n{trends}"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –î—Ä—É–≥–∏–µ —Ç—Ä–µ–Ω–¥—ã", callback_data=f"content_trends_cat_{idx}")],
            [InlineKeyboardButton("üìä –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç—ã", callback_data=f"popular_posts_cat_{idx}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await callback_query.edit_message_text(
            response_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        await callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {str(e)}")

async def trend_detective(client: Client, message: Message):
    """V2: –¢—Ä–µ–Ω–¥-–¥–µ—Ç–µ–∫—Ç–∏–≤"""
    user_id = message.from_user.id
    if not check_user_limit(user_id):
        await message.reply_text("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    keyboard = [[InlineKeyboardButton(cat, callback_data=f"trend_detective_cat_{i}")] for i, cat in enumerate(CATEGORIES)]
    await message.reply_text(
        "üîç –í–´–ë–ï–†–ò–¢–ï –ö–ê–¢–ï–ì–û–†–ò–Æ –î–õ–Ø –¢–†–ï–ù–î-–î–ï–¢–ï–ö–¢–ò–í–ê:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def trend_detective_cat_callback(client: Client, callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç—Ä–µ–Ω–¥-–¥–µ—Ç–µ–∫—Ç–∏–≤–∞"""
    await callback_query.answer()
    idx = int(callback_query.data.split('_')[-1])
    category = CATEGORIES[idx]
    
    await callback_query.edit_message_text(f"üîç –ò—Å—Å–ª–µ–¥—É—é —Ç—Ä–µ–Ω–¥—ã –¥–ª—è: {category}...")
    
    try:
        detective = await gpt_service.analyze_trend_detective(category)
        
        response_text = f"üîç –¢–†–ï–ù–î-–î–ï–¢–ï–ö–¢–ò–í (V2)\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n{detective}"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", callback_data=f"trend_detective_cat_{idx}")],
            [InlineKeyboardButton("üìà –¢—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç–µ–º—ã", callback_data=f"trending_topics_cat_{idx}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await callback_query.edit_message_text(
            response_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        await callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {str(e)}")

async def falling_trends(client: Client, message: Message):
    """V2: –ü–∞–¥–∞—é—â–∏–µ —Ç—Ä–µ–Ω–¥—ã"""
    user_id = message.from_user.id
    if not check_user_limit(user_id):
        await message.reply_text("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    keyboard = [[InlineKeyboardButton(cat, callback_data=f"falling_trends_cat_{i}")] for i, cat in enumerate(CATEGORIES)]
    await message.reply_text(
        "üìâ –í–´–ë–ï–†–ò–¢–ï –ö–ê–¢–ï–ì–û–†–ò–Æ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –ü–ê–î–ê–Æ–©–ò–• –¢–†–ï–ù–î–û–í:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def falling_trends_cat_callback(client: Client, callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–∞–¥–∞—é—â–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤"""
    await callback_query.answer()
    idx = int(callback_query.data.split('_')[-1])
    category = CATEGORIES[idx]
    
    await callback_query.edit_message_text(f"üìâ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–∞–¥–∞—é—â–∏–µ —Ç—Ä–µ–Ω–¥—ã –¥–ª—è: {category}...")
    
    try:
        falling = await gpt_service.analyze_falling_trends(category)
        
        response_text = f"üìâ –ü–ê–î–ê–Æ–©–ò–ï –¢–†–ï–ù–î–´ (V2)\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n{falling}"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–π –∞–Ω–∞–ª–∏–∑", callback_data=f"falling_trends_cat_{idx}")],
            [InlineKeyboardButton("üìà –¢—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç–µ–º—ã", callback_data=f"trending_topics_cat_{idx}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await callback_query.edit_message_text(
            response_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        await callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

async def trending_channels(client: Client, message: Message):
    """V2: –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã"""
    user_id = message.from_user.id
    if not check_user_limit(user_id):
        await message.reply_text("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    keyboard = [[InlineKeyboardButton(cat, callback_data=f"trending_channels_cat_{i}")] for i, cat in enumerate(CATEGORIES)]
    await message.reply_text(
        "üî• –í–´–ë–ï–†–ò–¢–ï –ö–ê–¢–ï–ì–û–†–ò–Æ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –¢–†–ï–ù–î–û–í–´–• –ö–ê–ù–ê–õ–û–í:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def trending_channels_cat_callback(client: Client, callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    await callback_query.answer()
    idx = int(callback_query.data.split('_')[-1])
    category = CATEGORIES[idx]
    
    await callback_query.edit_message_text(f"üî• –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã –≤: {category}...")
    
    try:
        channels = await gpt_service.analyze_trending_channels(category)
        
        response_text = f"üî• –¢–†–ï–ù–î–û–í–´–ï –ö–ê–ù–ê–õ–´ (V2)\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n{channels}"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –î—Ä—É–≥–∏–µ –∫–∞–Ω–∞–ª—ã", callback_data=f"trending_channels_cat_{idx}")],
            [InlineKeyboardButton("üìà –¢—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç–µ–º—ã", callback_data=f"trending_topics_cat_{idx}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await callback_query.edit_message_text(
            response_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        await callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–æ–≤: {str(e)}")

async def best_times(client: Client, message: Message):
    """V2: –õ—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    user_id = message.from_user.id
    if not check_user_limit(user_id):
        await message.reply_text("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    keyboard = [[InlineKeyboardButton(cat, callback_data=f"best_times_cat_{i}")] for i, cat in enumerate(CATEGORIES)]
    await message.reply_text(
        "‚è∞ –í–´–ë–ï–†–ò–¢–ï –ö–ê–¢–ï–ì–û–†–ò–Æ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –õ–£–ß–®–ï–ì–û –í–†–ï–ú–ï–ù–ò:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def best_times_cat_callback(client: Client, callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    await callback_query.answer()
    idx = int(callback_query.data.split('_')[-1])
    category = CATEGORIES[idx]
    
    await callback_query.edit_message_text(f"‚è∞ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ª—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è: {category}...")
    
    try:
        times = await gpt_service.analyze_best_times(category)
        
        response_text = f"‚è∞ –õ–£–ß–®–ï–ï –í–†–ï–ú–Ø –î–õ–Ø –ü–£–ë–õ–ò–ö–ê–¶–ò–ô (V2)\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n{times}"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è", callback_data=f"best_times_cat_{idx}")],
            [InlineKeyboardButton("üöÄ –ò–¥–µ–∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏", callback_data=f"engagement_boost_cat_{idx}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await callback_query.edit_message_text(
            response_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        await callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–∏: {str(e)}")

# --- V2 –§–£–ù–ö–¶–ò–ò (ANALYZE MY CHANNEL) ---
async def growth_tips(client: Client, message: Message):
    """V2: –°–æ–≤–µ—Ç—ã –ø–æ —Ä–æ—Å—Ç—É –∫–∞–Ω–∞–ª–∞"""
    user_id = message.from_user.id
    user_info = get_user_info(user_id)
    
    if not user_info['is_pro']:
        await message.reply_text(
            "üîí –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ PRO –≤–µ—Ä—Å–∏–∏!\n\n"
            "üí° –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Ä–æ—Å—Ç—É\n"
            "‚Ä¢ –ü–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è –∫–∞–Ω–∞–ª–∞\n"
            "‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è\n"
            "‚Ä¢ KPI –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n\n"
            "üí≥ –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!"
        )
        return
    
    await message.reply_text(
        "üöÄ –°–û–í–ï–¢–´ –ü–û –†–û–°–¢–£ –ö–ê–ù–ê–õ–ê (V2)\n\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —Ä–æ—Å—Ç—É –∫–∞–Ω–∞–ª–∞,\n"
        "–≤–≤–µ–¥–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @mychannel) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª."
    )

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def load_tasks():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(TASKS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_tasks(tasks):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏ –≤ —Ñ–∞–π–ª"""
    with open(TASKS_FILE, 'w', encoding='utf-8') as f:
        json.dump(tasks, f, ensure_ascii=False, indent=2)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è PRO —Ñ—É–Ω–∫—Ü–∏–π ---
async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è PRO —Ñ—É–Ω–∫—Ü–∏–π"""
    text = update.message.text
    user_id = update.effective_user.id
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    if context.user_data.get('waiting_for_promocode'):
        payment_id = context.user_data['waiting_for_promocode']
        result = payment_service.apply_promocode(payment_id, text.upper())
        
        if result["success"]:
            await update.message.reply_text(
                f"‚úÖ {result['message']}\n"
                f"üí∞ –ù–æ–≤–∞—è —Å—É–º–º–∞: {result['new_amount']}‚ÇΩ"
            )
        else:
            await update.message.reply_text(f"‚ùå {result['message']}")
        
        context.user_data.pop('waiting_for_promocode', None)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–∞ –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞
    if context.user_data.get('waiting_for_post_feedback'):
        user_info = get_user_info(user_id)
        if not user_info['is_pro']:
            await update.message.reply_text("üîí –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ PRO –≤–µ—Ä—Å–∏–∏!")
            context.user_data.pop('waiting_for_post_feedback', None)
            return
        
        await update.message.reply_text("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –ø–æ—Å—Ç...")
        
        try:
            analysis = await gpt_service.analyze_post_feedback(text)
            await update.message.reply_text(analysis)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        
        context.user_data.pop('waiting_for_post_feedback', None)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
    if context.user_data.get('waiting_for_post_rewrite'):
        user_info = get_user_info(user_id)
        if not user_info['is_pro']:
            await update.message.reply_text("üîí –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ PRO –≤–µ—Ä—Å–∏–∏!")
            context.user_data.pop('waiting_for_post_rewrite', None)
            return
        
        await update.message.reply_text("‚úçÔ∏è –£–ª—É—á—à–∞—é –≤–∞—à –ø–æ—Å—Ç...")
        
        try:
            improved = await gpt_service.rewrite_post(text)
            await update.message.reply_text(improved)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è: {str(e)}")
        
        context.user_data.pop('waiting_for_post_rewrite', None)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∫—Ä–µ–∞—Ç–∏–≤–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    if context.user_data.get('waiting_for_ad_feedback'):
        user_info = get_user_info(user_id)
        if not user_info['is_pro']:
            await update.message.reply_text("üîí –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ PRO –≤–µ—Ä—Å–∏–∏!")
            context.user_data.pop('waiting_for_ad_feedback', None)
            return
        
        await update.message.reply_text("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Ä–µ–∫–ª–∞–º–Ω—ã–π –∫—Ä–µ–∞—Ç–∏–≤...")
        
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∫—Ä–µ–∞—Ç–∏–≤–∞
            analysis = f"üìä –ê–ù–ê–õ–ò–ó –†–ï–ö–õ–ê–ú–ù–û–ì–û –ö–†–ï–ê–¢–ò–í–ê\n\n{text}\n\n‚úÖ –ö—Ä–µ–∞—Ç–∏–≤ –ø–æ–ª—É—á–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ."
            await update.message.reply_text(analysis)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        
        context.user_data.pop('waiting_for_ad_feedback', None)
        return

# --- MAIN ---
if __name__ == "__main__":
    import asyncio
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", start))
    app.add_handler(CommandHandler("main", start))
    app.add_handler(CommandHandler("home", start))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ ReplyKeyboard (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã)
    from telegram.ext import MessageHandler, filters as tgfilters
    app.add_handler(MessageHandler(tgfilters.TEXT & ~tgfilters.COMMAND, menu_handler))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è PRO —Ñ—É–Ω–∫—Ü–∏–π
    app.add_handler(MessageHandler(tgfilters.TEXT & ~tgfilters.COMMAND, handle_text_message))
    
    # POSTS
    app.add_handler(CommandHandler("post_idea", post_idea))
    app.add_handler(CallbackQueryHandler(post_idea_cat_callback, pattern=r"^post_idea_cat_\d+$"))
    app.add_handler(CommandHandler("popular_posts", popular_posts))
    app.add_handler(CallbackQueryHandler(popular_posts_cat_callback, pattern=r"^popular_posts_cat_\d+$"))
    app.add_handler(CommandHandler("post_format", post_format))
    app.add_handler(CallbackQueryHandler(post_format_callback, pattern=r"^post_format_\d+$"))
    app.add_handler(CommandHandler("post_feedback", post_feedback))
    app.add_handler(CommandHandler("rewrite_post", rewrite_post))
    
    # ADS
    app.add_handler(CommandHandler("ad_ideas", ad_ideas))
    app.add_handler(CallbackQueryHandler(ad_ideas_cat_callback, pattern=r"^ad_ideas_cat_\d+$"))
    app.add_handler(CommandHandler("promo_text", promo_text))
    app.add_handler(CallbackQueryHandler(promo_text_cat_callback, pattern=r"^promo_text_cat_\d+$"))
    app.add_handler(CommandHandler("top_cta", top_cta))
    app.add_handler(CallbackQueryHandler(top_cta_cat_callback, pattern=r"^top_cta_cat_\d+$"))
    app.add_handler(CommandHandler("ad_tips", ad_tips))
    app.add_handler(CommandHandler("promo_plan", promo_plan))
    app.add_handler(CommandHandler("ad_feedback", ad_feedback))
    
    # TRENDS
    app.add_handler(CommandHandler("trending_topics", trending_topics))
    app.add_handler(CallbackQueryHandler(trending_topics_cat_callback, pattern=r"^trending_topics_cat_\d+$"))
    app.add_handler(CommandHandler("trending_channels", trending_channels))
    app.add_handler(CallbackQueryHandler(trending_channels_cat_callback, pattern=r"^trending_channels_cat_\d+$"))
    app.add_handler(CommandHandler("best_times", best_times))
    app.add_handler(CallbackQueryHandler(best_times_cat_callback, pattern=r"^best_times_cat_\d+$"))
    app.add_handler(CommandHandler("engagement_boost", engagement_boost))
    app.add_handler(CallbackQueryHandler(engagement_boost_cat_callback, pattern=r"^engagement_boost_cat_\d+$"))
    app.add_handler(CommandHandler("content_trends", content_trends))
    app.add_handler(CommandHandler("trend_detective", trend_detective))
    app.add_handler(CommandHandler("falling_trends", falling_trends))
    
    # ANALYZE MY CHANNEL
    app.add_handler(CommandHandler("channel_summary", channel_summary))
    app.add_handler(CommandHandler("audience_report", audience_report))
    app.add_handler(CommandHandler("content_quality", content_quality))
    app.add_handler(CommandHandler("style_review", style_review))
    app.add_handler(CommandHandler("growth_tips", growth_tips))
    
    # PRO –∏ –ø–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    app.add_handler(CommandHandler("subscription_info", subscription_info))
    app.add_handler(CallbackQueryHandler(upgrade_pro, pattern=r"^upgrade_pro$"))
    app.add_handler(CallbackQueryHandler(apply_promocode, pattern=r"^promo_\w+$"))
    app.add_handler(CallbackQueryHandler(process_payment, pattern=r"^pay_\w+$"))
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    app.add_handler(CallbackQueryHandler(main_menu_callback, pattern=r"^main_menu$"))
    
    # –°—Ç–∞—Ä—ã–π –ø–∞—Ä—Å–µ—Ä
    app.add_handler(CommandHandler("parse", parse_command))
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ.")
    print("üìä FREE —Ñ—É–Ω–∫—Ü–∏–∏: ‚úÖ")
    print("üîí PRO —Ñ—É–Ω–∫—Ü–∏–∏: ‚úÖ")
    print("üí≥ –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: ‚úÖ")
    print("üéØ GPT –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: ‚úÖ")
    
    app.run_polling() 