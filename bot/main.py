import asyncio
import os
from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from dotenv import load_dotenv
from bot.db import SessionLocal, init_db
from bot.handlers import start_handler, addgroup_handler, stats_handler
from tg_bot_parser import (
    post_idea, popular_posts, post_format, ad_ideas, promo_text, top_cta,
    trending_topics, engagement_boost, channel_summary, audience_report,
    content_quality, style_review, subscription_info, upgrade_pro,
    post_idea_cat_callback, popular_posts_cat_callback, post_format_callback,
    ad_ideas_cat_callback, promo_text_cat_callback, top_cta_cat_callback,
    trending_topics_cat_callback, engagement_boost_cat_callback,
    # V2 —Ñ—É–Ω–∫—Ü–∏–∏
    post_feedback, rewrite_post, ad_tips, promo_plan, ad_feedback,
    content_trends, trend_detective, falling_trends, growth_tips,
    trending_channels, best_times,
    ad_tips_cat_callback, promo_plan_cat_callback, content_trends_cat_callback,
    trend_detective_cat_callback, falling_trends_cat_callback,
    trending_channels_cat_callback, best_times_cat_callback
)
from gpt_service import gpt_service
from subscription_service import subscription_service

load_dotenv()

API_ID = int(os.getenv("PYROGRAM_API_ID", "0"))
API_HASH = os.getenv("PYROGRAM_API_HASH", "")
BOT_TOKEN = os.getenv("PYROGRAM_BOT_TOKEN", "")

app = Client("bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@app.on_message(filters.command("start"))
async def start_command(client: Client, message: Message):
    await start_handler(client, message)

@app.on_message(filters.command("addgroup"))
async def addgroup_command(client: Client, message: Message):
    await addgroup_handler(client, message)

@app.on_message(filters.command("stats"))
async def stats_command(client: Client, message: Message):
    await stats_handler(client, message)

# –ö–æ–º–∞–Ω–¥—ã POSTS
@app.on_message(filters.command("post_idea"))
async def post_idea_command(client: Client, message: Message):
    await post_idea(client, message)

@app.on_message(filters.command("popular_posts"))
async def popular_posts_command(client: Client, message: Message):
    await popular_posts(client, message)

@app.on_message(filters.command("post_format"))
async def post_format_command(client: Client, message: Message):
    await post_format(client, message)

# –ö–æ–º–∞–Ω–¥—ã ADS
@app.on_message(filters.command("ad_ideas"))
async def ad_ideas_command(client: Client, message: Message):
    await ad_ideas(client, message)

@app.on_message(filters.command("promo_text"))
async def promo_text_command(client: Client, message: Message):
    await promo_text(client, message)

@app.on_message(filters.command("top_cta"))
async def top_cta_command(client: Client, message: Message):
    await top_cta(client, message)

# –ö–æ–º–∞–Ω–¥—ã TRENDS
@app.on_message(filters.command("trending_topics"))
async def trending_topics_command(client: Client, message: Message):
    await trending_topics(client, message)

@app.on_message(filters.command("engagement_boost"))
async def engagement_boost_command(client: Client, message: Message):
    await engagement_boost(client, message)

# V2 –∫–æ–º–∞–Ω–¥—ã TRENDS
@app.on_message(filters.command("content_trends"))
async def content_trends_command(client: Client, message: Message):
    await content_trends(client, message)

@app.on_message(filters.command("trend_detective"))
async def trend_detective_command(client: Client, message: Message):
    await trend_detective(client, message)

@app.on_message(filters.command("falling_trends"))
async def falling_trends_command(client: Client, message: Message):
    await falling_trends(client, message)

@app.on_message(filters.command("trending_channels"))
async def trending_channels_command(client: Client, message: Message):
    await trending_channels(client, message)

@app.on_message(filters.command("best_times"))
async def best_times_command(client: Client, message: Message):
    await best_times(client, message)

# –ö–æ–º–∞–Ω–¥—ã ANALYZE MY CHANNEL (PRO)
@app.on_message(filters.command("channel_summary"))
async def channel_summary_command(client: Client, message: Message):
    await channel_summary(client, message)

@app.on_message(filters.command("audience_report"))
async def audience_report_command(client: Client, message: Message):
    await audience_report(client, message)

@app.on_message(filters.command("content_quality"))
async def content_quality_command(client: Client, message: Message):
    await content_quality(client, message)

@app.on_message(filters.command("style_review"))
async def style_review_command(client: Client, message: Message):
    await style_review(client, message)

# V2 –∫–æ–º–∞–Ω–¥—ã ANALYZE MY CHANNEL (PRO)
@app.on_message(filters.command("growth_tips"))
async def growth_tips_command(client: Client, message: Message):
    await growth_tips(client, message)

# V2 –∫–æ–º–∞–Ω–¥—ã POSTS (PRO)
@app.on_message(filters.command("post_feedback"))
async def post_feedback_command(client: Client, message: Message):
    await post_feedback(client, message)

@app.on_message(filters.command("rewrite_post"))
async def rewrite_post_command(client: Client, message: Message):
    await rewrite_post(client, message)

# V2 –∫–æ–º–∞–Ω–¥—ã ADS
@app.on_message(filters.command("ad_tips"))
async def ad_tips_command(client: Client, message: Message):
    await ad_tips(client, message)

@app.on_message(filters.command("promo_plan"))
async def promo_plan_command(client: Client, message: Message):
    await promo_plan(client, message)

@app.on_message(filters.command("ad_feedback"))
async def ad_feedback_command(client: Client, message: Message):
    await ad_feedback(client, message)

# –ö–æ–º–∞–Ω–¥—ã –ø–æ–¥–ø–∏—Å–∫–∏
@app.on_message(filters.command("subscription"))
async def subscription_command(client: Client, message: Message):
    await subscription_info(client, message)

@app.on_message(filters.command("upgrade_pro"))
async def upgrade_pro_command(client: Client, message: Message):
    await upgrade_pro(client, message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
@app.on_callback_query(filters.regex(r"^post_idea_cat_"))
async def post_idea_callback(client: Client, callback_query: CallbackQuery):
    await post_idea_cat_callback(client, callback_query)

@app.on_callback_query(filters.regex(r"^popular_posts_cat_"))
async def popular_posts_callback(client: Client, callback_query: CallbackQuery):
    await popular_posts_cat_callback(client, callback_query)

@app.on_callback_query(filters.regex(r"^post_format_type_"))
async def post_format_callback(client: Client, callback_query: CallbackQuery):
    await post_format_callback(client, callback_query)

@app.on_callback_query(filters.regex(r"^ad_ideas_cat_"))
async def ad_ideas_callback(client: Client, callback_query: CallbackQuery):
    await ad_ideas_cat_callback(client, callback_query)

@app.on_callback_query(filters.regex(r"^promo_text_cat_"))
async def promo_text_callback(client: Client, callback_query: CallbackQuery):
    await promo_text_cat_callback(client, callback_query)

@app.on_callback_query(filters.regex(r"^top_cta_cat_"))
async def top_cta_callback(client: Client, callback_query: CallbackQuery):
    await top_cta_cat_callback(client, callback_query)

@app.on_callback_query(filters.regex(r"^trending_topics_cat_"))
async def trending_topics_callback(client: Client, callback_query: CallbackQuery):
    await trending_topics_cat_callback(client, callback_query)

@app.on_callback_query(filters.regex(r"^engagement_boost_cat_"))
async def engagement_boost_callback(client: Client, callback_query: CallbackQuery):
    await engagement_boost_cat_callback(client, callback_query)

# V2 callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@app.on_callback_query(filters.regex(r"^ad_tips_cat_"))
async def ad_tips_callback(client: Client, callback_query: CallbackQuery):
    await ad_tips_cat_callback(client, callback_query)

@app.on_callback_query(filters.regex(r"^promo_plan_cat_"))
async def promo_plan_callback(client: Client, callback_query: CallbackQuery):
    await promo_plan_cat_callback(client, callback_query)

@app.on_callback_query(filters.regex(r"^content_trends_cat_"))
async def content_trends_callback(client: Client, callback_query: CallbackQuery):
    await content_trends_cat_callback(client, callback_query)

@app.on_callback_query(filters.regex(r"^trend_detective_cat_"))
async def trend_detective_callback(client: Client, callback_query: CallbackQuery):
    await trend_detective_cat_callback(client, callback_query)

@app.on_callback_query(filters.regex(r"^falling_trends_cat_"))
async def falling_trends_callback(client: Client, callback_query: CallbackQuery):
    await falling_trends_cat_callback(client, callback_query)

@app.on_callback_query(filters.regex(r"^trending_channels_cat_"))
async def trending_channels_callback(client: Client, callback_query: CallbackQuery):
    await trending_channels_cat_callback(client, callback_query)

@app.on_callback_query(filters.regex(r"^best_times_cat_"))
async def best_times_callback(client: Client, callback_query: CallbackQuery):
    await best_times_cat_callback(client, callback_query)

@app.on_callback_query(filters.regex(r"^main_menu$"))
async def main_menu_callback(client: Client, callback_query: CallbackQuery):
    await callback_query.answer()
    await callback_query.edit_message_text(
        "üè† –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:\n\n"
        "üìù POSTS - –∏–¥–µ–∏ –ø–æ—Å—Ç–æ–≤, –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç—ã, —Ñ–æ—Ä–º–∞—Ç—ã\n"
        "üí∞ ADS - —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∏–¥–µ–∏, –ø—Ä–æ–º–æ-—Ç–µ–∫—Å—Ç—ã, CTA\n"
        "üìà TRENDS - —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç–µ–º—ã, –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å\n"
        "üìä ANALYZE - –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞ (PRO)\n"
        "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–æ–≤
@app.on_callback_query(filters.regex(r"^menu_"))
async def menu_callback(client: Client, callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–æ–≤"""
    await callback_query.answer()
    menu_type = callback_query.data.split('_')[1]
    
    if menu_type == "posts":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí° –ò–¥–µ—è –ø–æ—Å—Ç–∞", callback_data="post_idea_cat_0")],
            [InlineKeyboardButton("üìä –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç—ã", callback_data="popular_posts_cat_0")],
            [InlineKeyboardButton("üìù –§–æ—Ä–º–∞—Ç –ø–æ—Å—Ç–∞", callback_data="post_format_type_0")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await callback_query.edit_message_text(
            "üìù –†–ê–ó–î–ï–õ: POSTS\n\n"
            "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n"
            "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –∏–¥–µ—é –¥–ª—è –ø–æ—Å—Ç–∞\n"
            "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç—ã\n"
            "‚Ä¢ –£–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—ã –∏ —Å–æ–≤–µ—Ç—ã",
            reply_markup=keyboard
        )
    
    elif menu_type == "ads":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí∞ –†–µ–∫–ª–∞–º–Ω—ã–µ –∏–¥–µ–∏", callback_data="ad_ideas_cat_0")],
            [InlineKeyboardButton("üì¢ –ü—Ä–æ–º–æ-—Ç–µ–∫—Å—Ç—ã", callback_data="promo_text_cat_0")],
            [InlineKeyboardButton("üî• –¢–æ–ø CTA", callback_data="top_cta_cat_0")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await callback_query.edit_message_text(
            "üí∞ –†–ê–ó–î–ï–õ: ADS\n\n"
            "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n"
            "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –∏–¥–µ–∏ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã\n"
            "‚Ä¢ –£–∑–Ω–∞—Ç—å –ª—É—á—à–∏–µ –∫—Ä–µ–∞—Ç–∏–≤—ã –∏ CTA\n"
            "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—é",
            reply_markup=keyboard
        )
    
    elif menu_type == "trends":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìà –¢—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç–µ–º—ã", callback_data="trending_topics_cat_0")],
            [InlineKeyboardButton("üöÄ –ò–¥–µ–∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏", callback_data="engagement_boost_cat_0")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await callback_query.edit_message_text(
            "üìà –†–ê–ó–î–ï–õ: TRENDS\n\n"
            "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n"
            "‚Ä¢ –£–∑–Ω–∞—Ç—å —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç–µ–º—ã –∏ –∫–∞–Ω–∞–ª—ã\n"
            "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ—Å—Ç–æ–≤\n"
            "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –∏–¥–µ–∏ –¥–ª—è –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç–∏",
            reply_markup=keyboard
        )
    
    elif menu_type == "analyze":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìä –°–≤–æ–¥–∫–∞ –ø–æ –∫–∞–Ω–∞–ª—É (PRO)", callback_data="channel_summary")],
            [InlineKeyboardButton("üë• –û—Ç—á–µ—Ç –ø–æ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (PRO)", callback_data="audience_report")],
            [InlineKeyboardButton("üìù –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (PRO)", callback_data="content_quality")],
            [InlineKeyboardButton("üé® –ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è (PRO)", callback_data="style_review")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await callback_query.edit_message_text(
            "üìä –†–ê–ó–î–ï–õ: ANALYZE (PRO)\n\n"
            "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n"
            "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ —Å–≤–æ–µ–º—É –∫–∞–Ω–∞–ª—É\n"
            "‚Ä¢ –û—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Å—Ç–∏–ª—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
            "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ —Ä–æ—Å—Ç—É",
            reply_markup=keyboard
        )
    
    elif menu_type == "subscription":
        user_id = callback_query.from_user.id
        user_info = subscription_service.get_subscription_info(user_id)
        
        remaining = user_info['remaining_requests']
        limit = user_info['daily_limit']
        is_pro = user_info['is_pro']
        
        status_text = "üîí FREE" if not is_pro else "üíé PRO"
        
        response_text = f"üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–î–ü–ò–°–ö–ï\n\n"
        response_text += f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
        response_text += f"–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining}/{limit}\n"
        
        if is_pro:
            response_text += f"\n‚úÖ PRO —Ñ—É–Ω–∫—Ü–∏–∏:\n"
            for feature in user_info['pro_features']:
                response_text += f"‚Ä¢ {feature}\n"
        else:
            response_text += f"\nüí° –û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO –¥–ª—è:\n"
            response_text += f"‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n"
            response_text += f"‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏\n"
            response_text += f"‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤\n"
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí≥ –û–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ PRO", callback_data="upgrade_pro")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback_query.edit_message_text(response_text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è PRO —Ñ—É–Ω–∫—Ü–∏–π
@app.on_message(filters.text & ~filters.command)
async def handle_text_message(client: Client, message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è PRO —Ñ—É–Ω–∫—Ü–∏–π"""
    user_id = message.from_user.id
    text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if len(text) < 10:  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å PRO
    user_info = subscription_service.get_subscription_info(user_id)
    if not user_info['is_pro']:
        await message.reply_text(
            "üîí –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ PRO –≤–µ—Ä—Å–∏–∏!\n\n"
            "üí° –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö –ø–æ—Å—Ç–æ–≤ –æ–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ PRO."
        )
        return
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–æ–≤ –¥–ª—è PRO —Ñ—É–Ω–∫—Ü–∏–π
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –∞–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–∞, —É–ª—É—á—à–µ–Ω–∏–µ –∏ —Ç.–¥.

if __name__ == "__main__":
    app.run() 