import asyncio
from typing import Dict, List, Optional
from datetime import datetime, timedelta
from gpt_service import gpt_service

class ChannelAnalyzer:
    def __init__(self):
        self.analysis_cache = {}
    
    async def analyze_channel_summary(self, channel_data: Dict) -> str:
        """PRO: –°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –∫–∞–Ω–∞–ª—É"""
        try:
            prompt = f"""–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—É—é —Å–≤–æ–¥–∫—É –ø–æ –∫–∞–Ω–∞–ª—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö:

–ù–ê–ó–í–ê–ù–ò–ï: {channel_data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
–ü–û–î–ü–ò–°–ß–ò–ö–ò: {channel_data.get('subscribers', 0):,}
–ü–û–°–¢–û–í: {channel_data.get('posts_count', 0)}
–°–†–ï–î–ù–ò–ï –ü–†–û–°–ú–û–¢–†–´: {channel_data.get('avg_views', 0):,}
–í–û–í–õ–ï–ß–ï–ù–ù–û–°–¢–¨: {channel_data.get('engagement_rate', 0):.2f}%
–ö–ê–¢–ï–ì–û–†–ò–Ø: {channel_data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}

–î–∞–π –∞–Ω–∞–ª–∏–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
üìä –°–í–û–î–ö–ê –ü–û –ö–ê–ù–ê–õ–£

üéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê:
‚Ä¢ ...

üìà –ö–õ–Æ–ß–ï–í–´–ï –ú–ï–¢–†–ò–ö–ò:
‚Ä¢ ...

üí° –°–ò–õ–¨–ù–´–ï –°–¢–û–†–û–ù–´:
‚Ä¢ ...

‚ö†Ô∏è –û–ë–õ–ê–°–¢–ò –î–õ–Ø –£–õ–£–ß–®–ï–ù–ò–Ø:
‚Ä¢ ...

üöÄ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
‚Ä¢ ..."""

            response = await asyncio.to_thread(
                gpt_service.client.chat.completions.create,
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=800,
                temperature=0.7
            )
            
            return response.choices[0].message.content
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞: {str(e)}"
    
    async def generate_audience_report(self, channel_data: Dict) -> str:
        """PRO: –°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
        try:
            prompt = f"""–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∫–∞–Ω–∞–ª–∞:

–î–ê–ù–ù–´–ï –ö–ê–ù–ê–õ–ê:
–ù–∞–∑–≤–∞–Ω–∏–µ: {channel_data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
–ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {channel_data.get('subscribers', 0):,}
–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {channel_data.get('active_users_percent', 0):.1f}%
–ú–æ–ª—á–∞–ª–∏–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {channel_data.get('silent_users_percent', 0):.1f}%
–ù–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏: {channel_data.get('new_followers', 0)}
–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏: {channel_data.get('lost_followers', 0)}

–°–æ–∑–¥–∞–π –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
üë• –û–¢–ß–ï–¢ –ü–û –ê–£–î–ò–¢–û–†–ò–ò

üìä –î–ï–ú–û–ì–†–ê–§–ò–Ø:
‚Ä¢ ...

üéØ –ü–û–í–ï–î–ï–ù–ò–ï –ê–£–î–ò–¢–û–†–ò–ò:
‚Ä¢ ...

üìà –î–ò–ù–ê–ú–ò–ö–ê –†–û–°–¢–ê:
‚Ä¢ ...

üí° –ò–ù–°–ê–ô–¢–´:
‚Ä¢ ...

üöÄ –°–¢–†–ê–¢–ï–ì–ò–ò –†–ê–ë–û–¢–´ –° –ê–£–î–ò–¢–û–†–ò–ï–ô:
‚Ä¢ ..."""

            response = await asyncio.to_thread(
                gpt_service.client.chat.completions.create,
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=800,
                temperature=0.7
            )
            
            return response.choices[0].message.content
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∞—É–¥–∏—Ç–æ—Ä–∏–∏: {str(e)}"
    
    async def analyze_content_quality(self, posts_data: List[Dict]) -> str:
        """PRO: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        if not posts_data:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã
            total_posts = len(posts_data)
            posts_with_images = len([p for p in posts_data if p.get('has_image')])
            avg_views = sum(p.get('views', 0) for p in posts_data) / total_posts if total_posts > 0 else 0
            avg_reactions = sum(p.get('reactions', 0) for p in posts_data) / total_posts if total_posts > 0 else 0
            
            # –¢–æ–ø –ø–æ—Å—Ç—ã
            top_posts = sorted(posts_data, key=lambda x: x.get('views', 0), reverse=True)[:5]
            
            prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫–∞–Ω–∞–ª–∞:

–°–¢–ê–¢–ò–°–¢–ò–ö–ê:
–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {total_posts}
–ü–æ—Å—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {posts_with_images} ({posts_with_images/total_posts*100:.1f}%)
–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {avg_views:,.0f}
–°—Ä–µ–¥–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏: {avg_reactions:.1f}

–¢–û–ü-5 –ü–û–°–¢–û–í:
{chr(10).join([f"{i+1}. {p.get('views', 0):,} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ | {p.get('text', '')[:100]}..." for i, p in enumerate(top_posts)])}

–î–∞–π –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
üìù –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –ö–û–ù–¢–ï–ù–¢–ê

üìä –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê: X/10

üéØ –°–ò–õ–¨–ù–´–ï –°–¢–û–†–û–ù–´:
‚Ä¢ ...

‚ö†Ô∏è –°–õ–ê–ë–´–ï –ú–ï–°–¢–ê:
‚Ä¢ ...

üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:
‚Ä¢ ...

üìà –ü–õ–ê–ù –†–ê–ó–í–ò–¢–ò–Ø:
‚Ä¢ ..."""

            response = await asyncio.to_thread(
                gpt_service.client.chat.completions.create,
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=800,
                temperature=0.7
            )
            
            return response.choices[0].message.content
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {str(e)}"
    
    async def analyze_style_review(self, posts_data: List[Dict]) -> str:
        """PRO: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∏–ª—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        if not posts_data:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∏–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞."
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
            text_samples = [p.get('text', '')[:200] for p in posts_data[:10]]
            
            prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç–∏–ª—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫–∞–Ω–∞–ª–∞:

–û–ë–†–ê–ó–¶–´ –¢–ï–ö–°–¢–û–í:
{chr(10).join([f"{i+1}. {text}" for i, text in enumerate(text_samples)])}

–î–∞–π –∞–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
üé® –ê–ù–ê–õ–ò–ó –°–¢–ò–õ–Ø –ö–û–ù–¢–ï–ù–¢–ê

üìù –¢–û–ù –ò –ì–û–õ–û–°:
‚Ä¢ ...

üéØ –¶–ï–õ–ï–í–ê–Ø –ê–£–î–ò–¢–û–†–ò–Ø:
‚Ä¢ ...

üí¨ –°–¢–ò–õ–ò–°–¢–ò–ß–ï–°–ö–ò–ï –û–°–û–ë–ï–ù–ù–û–°–¢–ò:
‚Ä¢ ...

‚úÖ –ß–¢–û –†–ê–ë–û–¢–ê–ï–¢:
‚Ä¢ ...

‚ö†Ô∏è –ß–¢–û –ú–û–ñ–ù–û –£–õ–£–ß–®–ò–¢–¨:
‚Ä¢ ...

üöÄ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –°–¢–ò–õ–Æ:
‚Ä¢ ..."""

            response = await asyncio.to_thread(
                gpt_service.client.chat.completions.create,
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=800,
                temperature=0.7
            )
            
            return response.choices[0].message.content
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∏–ª—è: {str(e)}"
    
    async def generate_growth_tips(self, channel_data: Dict, posts_data: List[Dict]) -> str:
        """PRO: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–≤–µ—Ç—ã –ø–æ —Ä–æ—Å—Ç—É –∫–∞–Ω–∞–ª–∞"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            avg_views = sum(p.get('views', 0) for p in posts_data) / len(posts_data) if posts_data else 0
            engagement_rate = channel_data.get('engagement_rate', 0)
            subscribers = channel_data.get('subscribers', 0)
            
            prompt = f"""–°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Ä–æ—Å—Ç—É –∫–∞–Ω–∞–ª–∞:

–¢–ï–ö–£–©–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:
–ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {subscribers:,}
–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {avg_views:,.0f}
–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: {engagement_rate:.2f}%
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {channel_data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}

–î–∞–π —Å–æ–≤–µ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
üöÄ –°–û–í–ï–¢–´ –ü–û –†–û–°–¢–£ –ö–ê–ù–ê–õ–ê

üìà –ö–†–ê–¢–ö–û–°–†–û–ß–ù–´–ï –¶–ï–õ–ò (1-2 –Ω–µ–¥–µ–ª–∏):
‚Ä¢ ...

üéØ –°–†–ï–î–ù–ï–°–†–û–ß–ù–´–ï –¶–ï–õ–ò (1-2 –º–µ—Å—è—Ü–∞):
‚Ä¢ ...

üåü –î–û–õ–ì–û–°–†–û–ß–ù–´–ï –¶–ï–õ–ò (3-6 –º–µ—Å—è—Ü–µ–≤):
‚Ä¢ ...

üí° –ö–û–ù–ö–†–ï–¢–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:
‚Ä¢ ...

üìä KPI –î–õ–Ø –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø:
‚Ä¢ ...

üéØ –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –ó–ê–î–ê–ß–ò:
‚Ä¢ ..."""

            response = await asyncio.to_thread(
                gpt_service.client.chat.completions.create,
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=800,
                temperature=0.7
            )
            
            return response.choices[0].message.content
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —Ä–æ—Å—Ç—É: {str(e)}"
    
    async def analyze_trending_channels(self, category: str) -> str:
        """PRO: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            prompt = f"""–°–æ–∑–¥–∞–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}":

–í–∫–ª—é—á–∏:
‚Ä¢ 5-7 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ –ò—Ö –∫–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
‚Ä¢ –°–µ–∫—Ä–µ—Ç—ã —É—Å–ø–µ—Ö–∞
‚Ä¢ –ß—Ç–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω—è—Ç—å
‚Ä¢ –¢—Ä–µ–Ω–¥—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

–û—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
üî• –¢–†–ï–ù–î–û–í–´–ï –ö–ê–ù–ê–õ–´ –í {category.upper()}

üìä –¢–û–ü –ö–ê–ù–ê–õ–û–í:
1. [–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞]
   ‚Ä¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: X
   ‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: ...
   ‚Ä¢ –°–µ–∫—Ä–µ—Ç—ã —É—Å–ø–µ—Ö–∞: ...

2. [–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞]
   ‚Ä¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: X
   ‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: ...
   ‚Ä¢ –°–µ–∫—Ä–µ—Ç—ã —É—Å–ø–µ—Ö–∞: ...

üí° –ß–¢–û –ú–û–ñ–ù–û –ü–ï–†–ï–ù–Ø–¢–¨:
‚Ä¢ ...

üéØ –¢–†–ï–ù–î–´ –í –ö–ê–¢–ï–ì–û–†–ò–ò:
‚Ä¢ ..."""

            response = await asyncio.to_thread(
                gpt_service.client.chat.completions.create,
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=800,
                temperature=0.8
            )
            
            return response.choices[0].message.content
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {str(e)}"
    
    async def analyze_best_times(self, category: str, posts_data: List[Dict]) -> str:
        """PRO: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
        if not posts_data:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π."
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
            prompt = f"""–°–æ–∑–¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ª—É—á—à–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}":

–í–∫–ª—é—á–∏:
‚Ä¢ –õ—É—á—à–∏–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —á–∞—Å—ã
‚Ä¢ –°–µ–∑–æ–Ω–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–û—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
‚è∞ –õ–£–ß–®–ï–ï –í–†–ï–ú–Ø –î–õ–Ø –ü–£–ë–õ–ò–ö–ê–¶–ò–ô

üìÖ –ü–û –î–ù–Ø–ú –ù–ï–î–ï–õ–ò:
‚Ä¢ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: ...
‚Ä¢ –í—Ç–æ—Ä–Ω–∏–∫: ...
‚Ä¢ ...

üïê –ü–û –ß–ê–°–ê–ú:
‚Ä¢ –£—Ç—Ä–æ (6:00-12:00): ...
‚Ä¢ –î–µ–Ω—å (12:00-18:00): ...
‚Ä¢ –í–µ—á–µ—Ä (18:00-24:00): ...

üìä –û–°–û–ë–ï–ù–ù–û–°–¢–ò –ê–£–î–ò–¢–û–†–ò–ò:
‚Ä¢ ...

üéØ –ö–û–ù–ö–†–ï–¢–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
‚Ä¢ ..."""

            response = await asyncio.to_thread(
                gpt_service.client.chat.completions.create,
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=600,
                temperature=0.7
            )
            
            return response.choices[0].message.content
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {str(e)}"
    
    async def detect_content_trends(self, category: str) -> str:
        """PRO: –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        try:
            prompt = f"""–°–æ–∑–¥–∞–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}":

–í–∫–ª—é—á–∏:
‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã
‚Ä¢ –§–æ—Ä–º–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–±–∏—Ä–∞—é—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å
‚Ä¢ –¢–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Å—É–∂–¥–∞—é—Ç—Å—è
‚Ä¢ –ù–æ–≤—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É
‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –±—É–¥—É—â–µ–µ

–û—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
üìà –¢–†–ï–ù–î–´ –ö–û–ù–¢–ï–ù–¢–ê –í {category.upper()}

üî• –ê–ö–¢–£–ê–õ–¨–ù–´–ï –¢–†–ï–ù–î–´:
‚Ä¢ ...

üì± –ü–û–ü–£–õ–Ø–†–ù–´–ï –§–û–†–ú–ê–¢–´:
‚Ä¢ ...

üí¨ –¢–ï–ú–´ –î–õ–Ø –û–ë–°–£–ñ–î–ï–ù–ò–Ø:
‚Ä¢ ...

üöÄ –ù–û–í–´–ï –ü–û–î–•–û–î–´:
‚Ä¢ ...

üîÆ –ü–†–û–ì–ù–û–ó–´ –ù–ê –ë–£–î–£–©–ï–ï:
‚Ä¢ ..."""

            response = await asyncio.to_thread(
                gpt_service.client.chat.completions.create,
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=800,
                temperature=0.8
            )
            
            return response.choices[0].message.content
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ç—Ä–µ–Ω–¥–æ–≤: {str(e)}"
    
    async def analyze_falling_trends(self, category: str) -> str:
        """PRO: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞–¥–∞—é—â–∏–µ —Ç—Ä–µ–Ω–¥—ã"""
        try:
            prompt = f"""–°–æ–∑–¥–∞–π –∞–Ω–∞–ª–∏–∑ –ø–∞–¥–∞—é—â–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}":

–í–∫–ª—é—á–∏:
‚Ä¢ –ß—Ç–æ —Ç–µ—Ä—è–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å
‚Ä¢ –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
‚Ä¢ –¢–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—Å—Ç–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å
‚Ä¢ –ü—Ä–∏—á–∏–Ω—ã –ø–∞–¥–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤
‚Ä¢ –ö–∞–∫ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è

–û—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
üìâ –ü–ê–î–ê–Æ–©–ò–ï –¢–†–ï–ù–î–´ –í {category.upper()}

‚ùå –ß–¢–û –¢–ï–†–Ø–ï–¢ –ü–û–ü–£–õ–Ø–†–ù–û–°–¢–¨:
‚Ä¢ ...

üì± –£–°–¢–ê–†–ï–í–®–ò–ï –§–û–†–ú–ê–¢–´:
‚Ä¢ ...

üí¨ –¢–ï–ú–´, –ö–û–¢–û–†–´–ï –ù–ï –†–ê–ë–û–¢–ê–Æ–¢:
‚Ä¢ ...

üîç –ü–†–ò–ß–ò–ù–´ –ü–ê–î–ï–ù–ò–Ø:
‚Ä¢ ...

üîÑ –ö–ê–ö –ê–î–ê–ü–¢–ò–†–û–í–ê–¢–¨–°–Ø:
‚Ä¢ ..."""

            response = await asyncio.to_thread(
                gpt_service.client.chat.completions.create,
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=600,
                temperature=0.7
            )
            
            return response.choices[0].message.content
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞–¥–∞—é—â–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤: {str(e)}"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤
channel_analyzer = ChannelAnalyzer() 